name: "Complex Project"
description: "A complex project with multiple modules and dependencies"
files:
  - path: "src/index.ts"
    content: |
      export { Database } from './database/index.js';
      export { ApiServer } from './api/server.js';
      export { UserService } from './services/user.js';
      export * from './types/index.js';
  
  - path: "src/database/index.ts"
    content: |
      import { Config } from '../types/index.js';
      
      export interface DatabaseConnection {
        connect(): Promise<void>;
        disconnect(): Promise<void>;
      }
      
      export class Database implements DatabaseConnection {
        private config: Config;
        
        constructor(config: Config) {
          this.config = config;
        }
        
        async connect(): Promise<void> {
          // Implementation
        }
        
        async disconnect(): Promise<void> {
          // Implementation
        }
      }
  
  - path: "src/api/server.ts"
    content: |
      import { Database } from '../database/index.js';
      import { UserService } from '../services/user.js';
      import { ApiConfig } from '../types/index.js';
      
      export class ApiServer {
        private db: Database;
        private userService: UserService;
        private config: ApiConfig;
        
        constructor(config: ApiConfig, db: Database) {
          this.config = config;
          this.db = db;
          this.userService = new UserService(db);
        }
        
        async start(): Promise<void> {
          await this.db.connect();
        }
        
        async stop(): Promise<void> {
          await this.db.disconnect();
        }
      }
  
  - path: "src/services/user.ts"
    content: |
      import { Database } from '../database/index.js';
      import { User, CreateUserRequest } from '../types/index.js';
      
      export class UserService {
        private db: Database;
        
        constructor(db: Database) {
          this.db = db;
        }
        
        async createUser(request: CreateUserRequest): Promise<User> {
          // Implementation
          return {} as User;
        }
        
        async getUser(id: string): Promise<User | null> {
          // Implementation
          return null;
        }
      }
      
      export const validateUser = (user: User): boolean => {
        return user.id !== undefined && user.name !== undefined;
      };
  
  - path: "src/types/index.ts"
    content: |
      export interface Config {
        database: {
          host: string;
          port: number;
        };
      }
      
      export interface ApiConfig extends Config {
        api: {
          port: number;
          cors: boolean;
        };
      }
      
      export interface User {
        id: string;
        name: string;
        email: string;
        createdAt: Date;
      }
      
      export interface CreateUserRequest {
        name: string;
        email: string;
      }
      
      export type UserStatus = 'active' | 'inactive' | 'suspended';
  
  - path: "src/utils/validation.ts"
    content: |
      export const isEmail = (email: string): boolean => {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      };
      
      export const isValidId = (id: string): boolean => {
        return id.length > 0 && /^[a-zA-Z0-9-_]+$/.test(id);
      };
  
  - path: "tests/user.test.ts"
    content: |
      import { UserService } from '../src/services/user.js';
      
      // Test file - should be ignored by default
      describe('UserService', () => {
        it('should create user', () => {
          // Test implementation
        });
      });
  
  - path: "package.json"
    content: |
      {
        "name": "complex-project",
        "version": "2.1.0",
        "type": "module",
        "scripts": {
          "build": "tsc",
          "test": "bun test",
          "start": "node dist/index.js"
        }
      }

gitignore:
  - "node_modules"
  - "dist"
  - "*.log"
  - ".env"
  - "tests/**"

expected_nodes: 20
expected_files: 6
expected_symbols: 14