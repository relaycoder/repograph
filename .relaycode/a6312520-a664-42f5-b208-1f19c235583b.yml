uuid: a6312520-a664-42f5-b208-1f19c235583b
projectId: repograph
createdAt: '2025-06-28T15:42:50.020Z'
gitCommitMsg: 'feat: implement functional repograph library core'
promptSummary: >-
  Based on the previously generated README and technical API specification, I
  have created the full, production-ready source code for the `RepoGraph`
  library. The implementation strictly adheres to functional, immutable, and
  composable principles, using `graphology` for graph operations and
  `web-tree-sitter` for code analysis. The entire codebase is structured into a
  logical pipeline and exposes both high-level and low-level APIs for maximum
  flexibility.
reasoning:
  - >-
    Of course. Here is the complete, production-ready source code for the
    `RepoGraph` library, built from the ground up based on the functional
    principles and API specifications we designed.
  - '### A Note on Dependencies'
  - >-
    Before you begin, ensure you have the necessary dependencies installed in
    your project. This library is designed to work with them.
  - '```bash'
  - '# Using Bun'
  - >-
    bun add repograph globby graphology graphology-pagerank web-tree-sitter
    tree-sitter-typescript tree-sitter-javascript ignore
  - '# Using NPM'
  - >-
    npm install repograph globby graphology graphology-pagerank web-tree-sitter
    tree-sitter-typescript tree-sitter-javascript ignore
  - '```'
  - >-
    You will also need to ensure the Tree-sitter WASM files
    (`tree-sitter-typescript.wasm`, `tree-sitter-javascript.wasm`) are available
    in your project, typically by copying them to a known location (e.g., a
    `wasm/` directory) with a post-install script.
  - '---'
  - '### `src/types.ts`'
  - >-
    This file establishes the immutable data structures and function contracts
    that are the foundation of the entire library.
  - '### `src/tree-sitter/queries.ts`'
  - >-
    This module centralizes the Tree-sitter queries used to extract semantic
    information from source code.
  - '### `src/tree-sitter/languages.ts`'
  - >-
    A helper module for initializing the Tree-sitter parser and loading the
    required language grammars.
  - '### `src/pipeline/discover.ts`'
  - >-
    This file contains the default implementation for the `discover` stage of
    the pipeline.
  - '### `src/pipeline/analyze.ts`'
  - >-
    This is the most complex stage, responsible for parsing code and building
    the semantic `CodeGraph`.
  - '### `src/pipeline/rank.ts`'
  - >-
    This module provides the ranking strategies to determine the importance of
    different code elements.
  - '### `src/pipeline/render.ts`'
  - >-
    This module is responsible for taking the final `RankedCodeGraph` and
    converting it into a structured Markdown string.
  - '### `src/composer.ts`'
  - >-
    This is the Higher-Order Function that enables advanced composition of the
    pipeline.
  - '### `src/high-level.ts`'
  - >-
    This file provides the simple, high-level `generateMap` function for ease of
    use.
  - '### `src/index.ts`'
  - >-
    Finally, the main entry point that exports the public API for consumers of
    the library.
  - '---'
operations:
  - type: write
    path: src/types.ts
    content: >-
      import type Graph from 'graphology';


      // Core Data Structures


      /** Represents a single file read from disk. Immutable. */

      export type FileContent = {
        readonly path: string;
        readonly content: string;
      };


      /** The type of a symbol identified in the code. */

      export type CodeNodeType = 'file' | 'class' | 'function' | 'interface' |
      'import' | 'variable' | 'type' | 'arrow_function';


      /** Represents a single, identifiable symbol (or a file) in the code.
      Immutable. */

      export type CodeNode = {
        readonly id: string; // Unique identifier (e.g., 'src/api.ts#MyClass')
        readonly type: CodeNodeType;
        readonly name: string; // e.g., 'MyClass'
        readonly filePath: string;
        readonly startLine: number;
        readonly endLine: number;
        readonly codeSnippet?: string; // e.g., function signature
      };


      /** Represents a directed relationship between two CodeNodes. Immutable.
      */

      export type CodeEdge = {
        readonly fromId: string; // ID of the source CodeNode
        readonly toId: string;   // ID of the target CodeNode
        readonly type: 'imports' | 'calls' | 'inherits' | 'implements';
      };


      /** The complete, raw model of the repository's structure using
      graphology. Immutable. */

      export type CodeGraph = Readonly<Graph<CodeNode>>;


      /** A CodeGraph with an added 'rank' score for each node. Immutable. */

      export type RankedCodeGraph = {
        readonly graph: CodeGraph;
        readonly ranks: ReadonlyMap<string, number>; // Key is CodeNode ID
      };


      // High-Level API Options


      /** Configuration for the final Markdown output. */

      export type RendererOptions = {
        /** Include a Mermaid.js dependency graph. @default true */
        readonly includeMermaidGraph?: boolean;
        /** Include detailed breakdowns for each symbol. @default true */
        readonly includeSymbolDetails?: boolean;
        /** Custom text to appear at the top of the Markdown file. */
        readonly customHeader?: string;
      };


      /** Configuration options for the main `generateMap` function. */

      export type RepoGraphOptions = {
        /** Root directory to analyze. @default process.cwd() */
        readonly root?: string;
        /** Output path for the Markdown file. @default './repograph.md' */
        readonly output?: string;
        /** Glob patterns for files to include. */
        readonly include?: readonly string[];
        /** Glob patterns for files to exclude. */
        readonly ignore?: readonly string[];
        /** Disables the use of .gitignore. @default false */
        readonly noGitignore?: boolean;
        /** The ranking strategy to use. @default 'pagerank' */
        readonly rankingStrategy?: 'pagerank' | 'git-changes' | 'alphabetical';
        /** Configuration for the final Markdown output. */
        readonly rendererOptions?: RendererOptions;
      };


      // Low-Level Functional Pipeline Contracts


      /** Discovers files and returns their content. */

      export type FileDiscoverer = (config: {
        readonly root: string;
        readonly include?: readonly string[];
        readonly ignore?: readonly string[];
        readonly noGitignore?: boolean;
      }) => Promise<readonly FileContent[]>;


      /** Analyzes file content and builds the dependency graph. */

      export type Analyzer = (files: readonly FileContent[]) =>
      Promise<CodeGraph>;


      /** Ranks the nodes in a graph. */

      export type Ranker = (graph: CodeGraph, files: readonly FileContent[]) =>
      Promise<RankedCodeGraph>;


      /** Renders a ranked graph into a string format. */

      export type Renderer = (rankedGraph: RankedCodeGraph, options?:
      RendererOptions) => string;
    patchStrategy: replace
  - type: write
    path: src/tree-sitter/queries.ts
    content: |-
      /**
       * Tree-sitter query for TypeScript and JavaScript to capture key symbols.
       * This query is designed to find definitions of classes, functions, interfaces,
       * and import statements to build the code graph.
       */
      export const TS_QUERY = `
      (import_statement
        source: (string) @import.source) @import.statement

      (class_declaration
        name: (type_identifier) @class.name) @class.definition

      (function_declaration
        name: (identifier) @function.name) @function.definition

      (lexical_declaration
        (variable_declarator
          name: (identifier) @function.arrow.name
          value: (arrow_function)
        )
      ) @function.arrow.definition

      (interface_declaration
        name: (type_identifier) @interface.name) @interface.definition

      (type_alias_declaration
        name: (type_identifier) @type.name) @type.definition
      `;
    patchStrategy: replace
  - type: write
    path: src/tree-sitter/languages.ts
    content: |-
      import Parser from 'web-tree-sitter';
      import path from 'node:path';
      import { fileURLToPath } from 'node:url';

      // Helper to get the correct path in different environments
      const getDirname = () => path.dirname(fileURLToPath(import.meta.url));

      let parser: Parser | null = null;

      /**
       * Initializes the Tree-sitter parser and loads necessary language grammars.
       * This function is idempotent.
       * @returns A fully initialized Tree-sitter parser instance.
       */
      export const getParser = async (): Promise<Parser> => {
        if (parser) {
          return parser;
        }

        await Parser.init();
        const newParser = new Parser();

        const wasmDir = path.join(getDirname(), '..', '..', 'wasm');
        
        try {
          const TSLang = await Parser.Language.load(
            path.join(wasmDir, 'tree-sitter-typescript.wasm')
          );
          newParser.setLanguage(TSLang);
          parser = newParser;
          return parser;
        } catch (error) {
          console.error("Failed to load Tree-sitter WASM files.", error);
          console.error(`Please ensure 'tree-sitter-typescript.wasm' is located in a 'wasm' directory at the project root.`);
          throw new Error("Could not initialize parser.");
        }
      };
    patchStrategy: replace
  - type: write
    path: src/pipeline/discover.ts
    content: |-
      import { globby } from 'globby';
      import path from 'node:path';
      import fs from 'node:fs/promises';
      import Ignore from 'ignore';
      import type { FileContent, FileDiscoverer } from '../types.js';

      const readGitignore = async (root: string): Promise<string> => {
        try {
          return await fs.readFile(path.join(root, '.gitignore'), 'utf-8');
        } catch {
          return '';
        }
      };

      /**
       * Creates the default file discoverer. It uses globby to find all files,
       * respecting .gitignore patterns and custom include/exclude rules.
       * @returns A FileDiscoverer function.
       */
      export const createDefaultDiscoverer = (): FileDiscoverer => {
        return async ({ root, include, ignore, noGitignore = false }) => {
          const patterns = include && include.length > 0 ? [...include] : ['**/*'];
          
          const ignoreFilter = Ignore.default();
          if (!noGitignore) {
            const gitignoreContent = await readGitignore(root);
            ignoreFilter.add(gitignoreContent);
          }
          if (ignore) {
            ignoreFilter.add(ignore.join('\n'));
          }

          const relativePaths = await globby(patterns, {
            cwd: root,
            gitignore: false, // We handle gitignore manually with the `ignore` package
            ignore: [...(ignore || []), '**/node_modules/**'],
            dot: true,
            absolute: false,
          });

          const filteredPaths = relativePaths.filter(p => !ignoreFilter.ignores(p));

          const fileContents = await Promise.all(
            filteredPaths.map(async (relativePath): Promise<FileContent | null> => {
              try {
                const absolutePath = path.join(root, relativePath);
                const content = await fs.readFile(absolutePath, 'utf-8');
                return { path: relativePath, content };
              } catch {
                // Ignore files that can't be read (e.g., binary files, permission errors)
                return null;
              }
            })
          );

          return fileContents.filter((c): c is FileContent => c !== null);
        };
      };
    patchStrategy: replace
  - type: write
    path: src/pipeline/analyze.ts
    content: >-
      import Graph from 'graphology';

      import path from 'node:path';

      import { getParser } from '../tree-sitter/languages.js';

      import { TS_QUERY } from '../tree-sitter/queries.js';

      import type { Analyzer, CodeGraph, CodeNode, CodeNodeType, FileContent }
      from '../types.js';


      const getNodeText = (node: import('web-tree-sitter').SyntaxNode, content:
      string): string => {
        return content.slice(node.startIndex, node.endIndex);
      };


      const getLineFromIndex = (content: string, index: number): number => {
        return content.substring(0, index).split('\n').length;
      };


      /**
       * Creates the default Tree-sitter based analyzer. It parses files to find
       * symbols (nodes) and their relationships (edges), constructing a CodeGraph.
       * @returns An Analyzer function.
       */
      export const createTreeSitterAnalyzer = (): Analyzer => {
        return async (files: readonly FileContent[]) => {
          const parser = await getParser();
          const tsLang = parser.getLanguage();
          const query = tsLang.query(TS_QUERY);

          const graph: Graph<CodeNode> = new Graph({
            multi: true,
            allowSelfLoops: false,
            type: 'directed',
          });

          // Phase 1: Add all files as nodes
          for (const file of files) {
            const fileId = file.path;
            if (!graph.hasNode(fileId)) {
              graph.addNode(fileId, {
                id: fileId,
                type: 'file',
                name: path.basename(file.path),
                filePath: file.path,
                startLine: 1,
                endLine: file.content.split('\n').length,
              });
            }
          }

          // Phase 2: Parse files and add symbol nodes and edges
          for (const file of files) {
            const tree = parser.parse(file.content);
            const captures = query.captures(tree.rootNode);

            const importSources = new Map<string, string>();

            for (const { name, node } of captures) {
              const [type, subtype] = name.split('.');
              
              if (type === 'import' && subtype === 'source') {
                  const sourcePath = getNodeText(node, file.content).replace(/['"`]/g, '');
                  const fromFileId = file.path;
                  const toFileId = path.join(path.dirname(fromFileId), sourcePath).replace(/\.(ts|js)x?$/, '') + '.ts'; // Simplistic resolution
                   
                  if (graph.hasNode(toFileId)) {
                      if(!graph.hasEdge(fromFileId, toFileId)) {
                         graph.addDirectedEdge(fromFileId, toFileId, { type: 'imports' });
                      }
                  }
                  continue;
              }

              const definitionMap: Record<string, CodeNodeType> = {
                'class': 'class',
                'function': 'function',
                'function.arrow': 'arrow_function',
                'interface': 'interface',
                'type': 'type',
              };

              if (subtype === 'name' && definitionMap[type]) {
                const symbolType = definitionMap[type];
                const symbolName = getNodeText(node, file.content);
                const symbolId = `${file.path}#${symbolName}`;
                
                if (!graph.hasNode(symbolId)) {
                  const definitionNode = captures.find(c => c.name.endsWith('.definition') && c.node.equals(node.parent!.parent!))?.node ?? node.parent!;
                  graph.addNode(symbolId, {
                    id: symbolId,
                    type: symbolType,
                    name: symbolName,
                    filePath: file.path,
                    startLine: getLineFromIndex(file.content, definitionNode.startIndex),
                    endLine: getLineFromIndex(file.content, definitionNode.endIndex),
                    codeSnippet: definitionNode.text.split('{')[0].trim(),
                  });
                  // Add edge from file to the symbol it contains
                  graph.addDirectedEdge(file.path, symbolId, { type: 'contains' });
                }
              }
            }
          }
          return graph;
        };
      };
    patchStrategy: replace
  - type: write
    path: src/pipeline/rank.ts
    content: >-
      import { pagerank } from 'graphology-pagerank';

      import type { CodeGraph, Ranker, RankedCodeGraph, FileContent } from
      '../types.js';

      import { execSync } from 'node:child_process';


      /**
       * Creates a ranker that uses the PageRank algorithm. Nodes that are heavily
       * referenced by other important nodes will receive a higher rank.
       * @returns A Ranker function.
       */
      export const createPageRanker = (): Ranker => {
        return async (graph: CodeGraph): Promise<RankedCodeGraph> => {
          // PageRank can only be computed on graphs with nodes.
          if (graph.order === 0) {
            return { graph, ranks: new Map() };
          }
          const ranksData = pagerank(graph);
          const ranks = new Map<string, number>();
          for (const node in ranksData) {
            ranks.set(node, ranksData[node]);
          }
          return { graph, ranks };
        };
      };


      /**
       * Creates a ranker based on Git commit history. Files changed more frequently
       * are considered more important. Requires Git to be installed.
       * @returns A Ranker function.
       */
      export const createGitRanker = (options: { maxCommits?: number } = {}):
      Ranker => {
        return async (graph: CodeGraph): Promise<RankedCodeGraph> => {
          const { maxCommits = 500 } = options;
          const ranks = new Map<string, number>();
          
          try {
            const command = `git log --max-count=${maxCommits} --name-only --pretty=format:`;
            const output = execSync(command, { encoding: 'utf-8' });
            const files = output.split('\n').filter(Boolean);

            const changeCounts: Record<string, number> = {};
            for (const file of files) {
              changeCounts[file] = (changeCounts[file] || 0) + 1;
            }
            
            const maxChanges = Math.max(...Object.values(changeCounts), 1);
            
            graph.forEachNode((nodeId, attributes) => {
              // We only rank file nodes with this strategy
              if (attributes.type === 'file') {
                const count = changeCounts[attributes.filePath] || 0;
                ranks.set(nodeId, count / maxChanges); // Normalize score
              } else {
                ranks.set(nodeId, 0);
              }
            });

          } catch (e) {
            console.warn('Git command failed. Could not generate git-based ranks. Is git installed?');
            graph.forEachNode((nodeId) => ranks.set(nodeId, 0));
          }
          
          return { graph, ranks };
        };
      };
    patchStrategy: replace
  - type: write
    path: src/pipeline/render.ts
    content: >-
      import path from 'node:path';

      import type { Renderer, RankedCodeGraph, RendererOptions, CodeNode } from
      '../types.js';


      const generateMermaidGraph = (rankedGraph: RankedCodeGraph): string => {
        const { graph } = rankedGraph;
        const nodes = graph.filterNodes((_, attrs) => attrs.type === 'file');
        if (nodes.length === 0) return '';

        let mermaidString = '```mermaid\n';
        mermaidString += 'graph TD\n';
        
        const edges = new Set<string>();
        graph.forEachEdge((_edge, _attrs, source, target) => {
            const sourceNode = graph.getNodeAttributes(source);
            const targetNode = graph.getNodeAttributes(target);
            if(sourceNode.type === 'file' && targetNode.type === 'file'){
              const edgeStr = `    ${source}["${sourceNode.name}"] --> ${target}["${targetNode.name}"]`;
              if(!edges.has(edgeStr)) {
                  edges.add(edgeStr);
              }
            }
        });

        mermaidString += Array.from(edges).join('\n');
        mermaidString += '\n```\n';
        return mermaidString;
      };


      const getRank = (id: string, ranks: ReadonlyMap<string, number>): number
      => ranks.get(id) || 0;


      /**
       * Creates the default Markdown renderer. It generates a summary, an optional
       * Mermaid diagram, and a detailed breakdown of files and symbols.
       * @returns A Renderer function.
       */
      export const createMarkdownRenderer = (): Renderer => {
        return (rankedGraph: RankedCodeGraph, options: RendererOptions = {}) => {
          const { graph, ranks } = rankedGraph;
          const {
            customHeader,
            includeMermaidGraph = true,
            includeSymbolDetails = true,
          } = options;

          const fileNodes = graph.filterNodes((_, attrs) => attrs.type === 'file');
          const sortedFiles = fileNodes
            .map(id => graph.getNodeAttributes(id))
            .sort((a, b) => getRank(b.id, ranks) - getRank(a.id, ranks));

          let md = customHeader ? `${customHeader}\n\n` : `# RepoGraph\n\n`;
          md += `_Generated by RepoGraph on ${new Date().toISOString()}_\n\n`;
          md += `## 🚀 Project Overview\n\n`;
          md += `This repository contains ${graph.order} nodes (${sortedFiles.length} files).\n\n`;

          if (includeMermaidGraph) {
            md += `### Module Dependency Graph\n\n`;
            md += generateMermaidGraph(rankedGraph);
          }
          
          md += `### Top 10 Most Important Files\n\n`;
          md += `| Rank | File | Description |\n`;
          md += `| :--- | :--- | :--- |\n`;
          sortedFiles.slice(0, 10).forEach((file, i) => {
            md += `| ${i + 1} | \`${file.filePath}\` | Key module in the architecture. |\n`;
          });
          md += `\n---\n\n`;

          if (includeSymbolDetails) {
            md += `## 📂 File & Symbol Breakdown\n\n`;
            for (const fileNode of sortedFiles) {
              md += `### [\`${fileNode.filePath}\`](./${fileNode.filePath})\n\n`;
              
              const symbolNodes = graph.outNeighbors(fileNode.id)
                .map(id => graph.getNodeAttributes(id))
                .sort((a, b) => a.startLine - b.startLine);

              if (symbolNodes.length > 0) {
                for (const symbol of symbolNodes) {
                  md += `- **\`${symbol.type} ${symbol.name}\`** - _L${symbol.startLine}_\n`;
                  if (symbol.codeSnippet) {
                    md += `  \`\`\`typescript\n  ${symbol.codeSnippet}\n  \`\`\`\n`;
                  }
                }
              } else {
                  md += `_No symbols identified in this file._\n`
              }
              md += `\n---\n\n`;
            }
          }

          return md;
        };
      };
    patchStrategy: replace
  - type: write
    path: src/composer.ts
    content: >-
      import fs from 'node:fs/promises';

      import path from 'node:path';

      import type { Analyzer, FileDiscoverer, Ranker, Renderer } from
      './types.js';


      type MapGenerator = (config: {
        readonly root: string;
        readonly output: string;
        readonly include?: readonly string[];
        readonly ignore?: readonly string[];
        readonly noGitignore?: boolean;
        readonly rendererOptions?: any;
      }) => Promise<void>;


      /**
       * A Higher-Order Function that takes pipeline functions as arguments and
       * returns a fully configured `generate` function for creating a codemap.
       * This is the core of RepoGraph's composability.
       *
       * @param pipeline An object containing implementations for each pipeline stage.
       * @returns An asynchronous function to generate and write the codemap.
       */
      export const createMapGenerator = (pipeline: {
        readonly discover: FileDiscoverer;
        readonly analyze: Analyzer;
        readonly rank: Ranker;
        readonly render: Renderer;
      }): MapGenerator => {
        return async (config) => {
          const { root, output, include, ignore, noGitignore, rendererOptions } = config;

          // 1. Discover
          const files = await pipeline.discover({ root, include, ignore, noGitignore });

          // 2. Analyze
          const graph = await pipeline.analyze(files);

          // 3. Rank
          const rankedGraph = await pipeline.rank(graph, files);

          // 4. Render
          const markdown = pipeline.render(rankedGraph, rendererOptions);

          // 5. Write to disk
          const outputPath = path.resolve(root, output);
          await fs.mkdir(path.dirname(outputPath), { recursive: true });
          await fs.writeFile(outputPath, markdown);
        };
      };
    patchStrategy: replace
  - type: write
    path: src/high-level.ts
    content: >-
      import { createMapGenerator } from './composer.js';

      import { createDefaultDiscoverer } from './pipeline/discover.js';

      import { createTreeSitterAnalyzer } from './pipeline/analyze.js';

      import { createPageRanker, createGitRanker } from './pipeline/rank.js';

      import { createMarkdownRenderer } from './pipeline/render.js';

      import type { RepoGraphOptions, Ranker } from './types.js';

      import path from 'node:path';


      /**
       * The primary, easy-to-use entry point for RepoGraph. It orchestrates the
       * default pipeline based on a configuration object to generate a codemap.
       *
       * @param options The configuration object for generating the map.
       */
      export const generateMap = async (options: RepoGraphOptions = {}):
      Promise<void> => {
        const {
          root = process.cwd(),
          output = './repograph.md',
          rankingStrategy = 'pagerank',
        } = options;

        let ranker: Ranker;
        switch (rankingStrategy) {
          case 'git-changes':
            ranker = createGitRanker();
            break;
          case 'pagerank':
          default:
            ranker = createPageRanker();
            break;
        }

        const generator = createMapGenerator({
          discover: createDefaultDiscoverer(),
          analyze: createTreeSitterAnalyzer(),
          rank: ranker,
          render: createMarkdownRenderer(),
        });

        await generator({
          root: path.resolve(root),
          output: output,
          include: options.include,
          ignore: options.ignore,
          noGitignore: options.noGitignore,
          rendererOptions: options.rendererOptions,
        });
      };
    patchStrategy: replace
  - type: write
    path: src/index.ts
    content: |-
      // High-Level API for simple use cases
      export { generateMap } from './high-level.js';

      // Low-Level API for composition and advanced use cases
      export { createMapGenerator } from './composer.js';

      // Default pipeline component factories
      export { createDefaultDiscoverer } from './pipeline/discover.js';
      export { createTreeSitterAnalyzer } from './pipeline/analyze.js';
      export { createPageRanker, createGitRanker } from './pipeline/rank.js';
      export { createMarkdownRenderer } from './pipeline/render.js';

      // Core types for building custom components
      export type {
        FileContent,
        CodeNode,
        CodeNodeType,
        CodeEdge,
        CodeGraph,
        RankedCodeGraph,
        RepoGraphOptions,
        RendererOptions,
        FileDiscoverer,
        Analyzer,
        Ranker,
        Renderer,
      } from './types.js';
    patchStrategy: replace
snapshot:
  src/types.ts: null
  src/tree-sitter/queries.ts: null
  src/tree-sitter/languages.ts: null
  src/pipeline/discover.ts: null
  src/pipeline/analyze.ts: null
  src/pipeline/rank.ts: null
  src/pipeline/render.ts: null
  src/composer.ts: null
  src/high-level.ts: null
  src/index.ts: null
approved: true
