uuid: b1d93175-8025-4d05-acfc-33767c9c030d
projectId: repograph
createdAt: '2025-06-30T06:01:41.136Z'
gitCommitMsg: 'feat(parser): Add and fix queries for multiple languages'
promptSummary: >-
  Fix a large number of failing multi-language integration tests by improving
  and adding Tree-sitter queries and enhancing the analyzer logic.
reasoning:
  - >-
    Based on the test failures, it's clear there are significant gaps in
    language support, incorrect Tree-sitter queries, and missing logic for
    handling language-specific constructs. I will address these issues by:
  - >-
    1.  **Expanding and correcting language configurations
    (`src/tree-sitter/language-config.ts`):**
  - >-
    *   I'll add configurations for all missing languages from the tests (PHP,
    Ruby, Solidity, Swift, Vue).
  - >-
    *   I will split the TypeScript configuration into `typescript` and `tsx` to
    use the correct WASM parser for JSX/TSX syntax.
  - '*   I will add queries for missing constructs like `enum` in TypeScript.'
  - '*   I will correct the C# WASM path, which was causing loading errors.'
  - >-
    *   I will fix the C++ query, which contained an invalid node type
    (`method_definition`), and improve it to correctly identify methods and
    fields. To resolve header file ambiguity, I'll adjust the file extensions so
    `.h` files are treated as C++.
  - >-
    *   I will improve queries for Python, Rust, and other languages to capture
    more symbol types as required by the tests.
  - 2.  **Enhancing the analyzer (`src/pipeline/analyze.ts`):**
  - >-
    *   I'll add a new `tsx` language handler that reuses the existing
    TypeScript logic.
  - >-
    *   I'll introduce specific handlers for Python and C/C++ to correctly
    extract symbol names from complex nodes like assignments and field
    declarations, which the default logic can't handle.
  - >-
    These changes will significantly improve the accuracy and breadth of the
    code analysis, allowing the failing tests to pass.
operations:
  - type: write
    path: src/tree-sitter/language-config.ts
    content: >-
      --- src/tree-sitter/language-config.ts

      +++ src/tree-sitter/language-config.ts

      @@ -8,7 +8,7 @@
       export const LANGUAGE_CONFIGS: LanguageConfig[] = [
         {
           name: 'typescript',
      -    extensions: ['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs'],

      +    extensions: ['.ts', '.js', '.mjs', '.cjs'],
           wasmPath: 'tree-sitter-typescript/tree-sitter-typescript.wasm',
           query: `
       (import_statement
      @@ -28,6 +28,9 @@
       (type_alias_declaration) @type.definition
       (export_statement declaration: (type_alias_declaration)) @type.definition
       
      +(enum_declaration) @enum.definition

      +(export_statement declaration: (enum_declaration)) @enum.definition

      +
       (method_definition) @method.definition
       (public_field_definition) @field.definition
       
      @@ -37,6 +40,26 @@
       (call_expression
         function: (identifier) @function.call)
       `
      +  },

      +  {

      +    name: 'tsx',

      +    extensions: ['.tsx', '.jsx'],

      +    wasmPath: 'tree-sitter-typescript/tree-sitter-tsx.wasm',

      +    query: `

      +      (import_statement source: (string) @import.source)
      @import.statement

      +      (class_declaration) @class.definition

      +      (export_statement declaration: (class_declaration))
      @class.definition

      +      (function_declaration) @function.definition

      +      (export_statement declaration: (function_declaration))
      @function.definition

      +      (variable_declarator value: (arrow_function))
      @function.arrow.definition

      +      (public_field_definition value: (arrow_function))
      @function.arrow.definition

      +      (interface_declaration) @interface.definition

      +      (export_statement declaration: (interface_declaration))
      @interface.definition

      +      (type_alias_declaration) @type.definition

      +      (export_statement declaration: (type_alias_declaration))
      @type.definition

      +      (enum_declaration) @enum.definition

      +      (export_statement declaration: (enum_declaration)) @enum.definition

      +      (method_definition) @method.definition

      +      (public_field_definition) @field.definition

      +    `
         },
         {
           name: 'python',
      @@ -53,6 +76,12 @@
       
       (decorated_definition
         (class_definition)) @class.definition
      +

      +(class_definition

      +  body: (block (function_definition) @method.definition))

      +

      +(expression_statement

      +  (assignment)) @variable.definition
       `
         },
         {
      @@ -73,20 +102,8 @@
       `
         },
         {
      -    name: 'c',

      -    extensions: ['.c', '.h'],

      -    wasmPath: 'tree-sitter-c/tree-sitter-c.wasm',

      -    query: `

      -(preproc_include) @import.statement

      -

      -(function_definition) @function.definition

      -(declaration

      -  declarator: (function_declarator)) @function.declaration

      -

      -(struct_specifier) @struct.definition

      -(union_specifier) @union.definition

      -(enum_specifier) @enum.definition

      -

      -(type_definition) @type.definition

      -`

      -  },

      -  {
           name: 'cpp',
      -    extensions: ['.cpp', '.cc', '.cxx', '.hpp', '.hh', '.hxx'],

      +    extensions: ['.cpp', '.cc', '.cxx', '.h', '.hpp', '.hh', '.hxx'],
           wasmPath: 'tree-sitter-cpp/tree-sitter-cpp.wasm',
           query: `
       (preproc_include) @import.statement
      @@ -103,7 +120,24 @@
       
       (template_declaration) @template.definition
       
      -(method_definition) @method.definition

      +(function_definition declarator: (qualified_identifier))
      @method.definition

      +(field_declaration declarator: (function_declarator)) @method.definition

      +(field_declaration) @field.definition

      +`

      +  },

      +  {

      +    name: 'c',

      +    extensions: ['.c'],

      +    wasmPath: 'tree-sitter-c/tree-sitter-c.wasm',

      +    query: `

      +(preproc_include) @import.statement

      +

      +(function_definition) @function.definition

      +(declaration declarator: (function_declarator)) @function.declaration

      +(struct_specifier) @struct.definition

      +(union_specifier) @union.definition

      +(enum_specifier) @enum.definition

      +(type_definition) @type.definition
       `
         },
         {
      @@ -119,6 +153,7 @@
       (struct_item) @struct.definition
       (enum_item) @enum.definition
       (trait_item) @trait.definition
      +(function_signature_item) @method.definition
       
       (type_item) @type.definition
       (const_item) @constant.definition
      @@ -129,7 +164,7 @@
         {
           name: 'csharp',
           extensions: ['.cs'],
      -    wasmPath: 'tree-sitter-c-sharp/tree-sitter-c-sharp.wasm',

      +    wasmPath: 'tree-sitter-c-sharp/tree-sitter-c_sharp.wasm',
           query: `
       (using_directive) @import.statement
       
      @@ -146,7 +181,63 @@
       (property_declaration) @property.definition
       
       (namespace_declaration) @namespace.definition
      +`

      +  },

      +  {

      +    name: 'php',

      +    extensions: ['.php'],

      +    wasmPath: 'tree-sitter-php/tree-sitter-php.wasm',

      +    query: `

      +      (namespace_definition) @namespace.definition

      +      (class_declaration) @class.definition

      +      (function_definition) @function.definition

      +      (method_declaration) @method.definition

      +    `

      +  },

      +  {

      +    name: 'ruby',

      +    extensions: ['.rb'],

      +    wasmPath: 'tree-sitter-ruby/tree-sitter-ruby.wasm',

      +    query: `

      +      (module) @module.definition

      +      (class) @class.definition

      +      (method) @method.definition

      +      (singleton_method) @method.definition

      +    `

      +  },

      +  {

      +    name: 'solidity',

      +    extensions: ['.sol'],

      +    wasmPath: 'tree-sitter-solidity/tree-sitter-solidity.wasm',

      +    query: `

      +      (contract_declaration) @class.definition

      +      (function_definition) @function.definition

      +      (event_definition) @enum.definition

      +    `

      +  },

      +  {

      +    name: 'swift',

      +    extensions: ['.swift'],

      +    wasmPath: 'tree-sitter-swift/tree-sitter-swift.wasm',

      +    query: `

      +      (struct_declaration) @struct.definition

      +      (protocol_declaration) @trait.definition

      +      (enum_declaration) @enum.definition

      +      (extension_declaration) @impl.definition

      +      (function_declaration) @function.definition

      +      (variable_declaration) @field.definition

      +      (function_signature) @method.definition

      +    `

      +  },

      +  {

      +    name: 'vue',

      +    extensions: ['.vue'],

      +    wasmPath: 'tree-sitter-vue/tree-sitter-vue.wasm',

      +    query: `

      +      (script_element .

      +        [

      +          (lexical_declaration (variable_declarator))
      @variable.definition

      +          (function_declaration) @function.definition

      +        ])
       `
         }
       ];
    patchStrategy: new-unified
  - type: write
    path: src/pipeline/analyze.ts
    content: >-
      --- src/pipeline/analyze.ts

      +++ src/pipeline/analyze.ts

      @@ -37,6 +37,17 @@
         processedSymbols: Set<string>;
         fileState: Record<string, any>;
       };
      +

      +const pythonHandler: Partial<LanguageHandler> = {

      +  getSymbolNameNode: (declarationNode: TSNode) => {

      +    if (declarationNode.type === 'expression_statement') {

      +      const assignmentNode = declarationNode.namedChild(0);

      +      if (assignmentNode?.type === 'assignment') {

      +        return assignmentNode.childForFieldName('left');

      +      }

      +    }

      +    return declarationNode.childForFieldName('name');

      +  },

      +};
       
       const goLangHandler: Partial<LanguageHandler> = {
         getSymbolNameNode: (declarationNode: TSNode) => {
      @@ -62,6 +73,12 @@
               if (nameNode?.type === 'identifier') return nameNode;
             }
           }
      +    if (declarationNode.type === 'field_declaration') {

      +      const declarator = declarationNode.childForFieldName('declarator');

      +      if (declarator?.type === 'function_declarator') {

      +        return declarator.childForFieldName('declarator');

      +      }

      +      return declarator;

      +    }
           return declarationNode.childForFieldName('name');
         },
       };
      @@ -165,11 +182,15 @@
         javascript: {
           resolveImport: resolveImportFactory(['.js', '.jsx', '/index.js', '/index.jsx', '.mjs', '.cjs']),
         },
      -  python: { resolveImport: resolveImportFactory(['.py', '/__init__.py'])
      },

      +  tsx: tsLangHandler,

      +  python: { ...pythonHandler, resolveImport: resolveImportFactory(['.py',
      '/__init__.py']) },
         java: { resolveImport: resolveImportFactory(['.java'], true) },
         csharp: { resolveImport: resolveImportFactory(['.cs'], true) },
         go: goLangHandler,
      -  rust: { resolveImport: resolveImportFactory(['.rs', '/mod.rs']) },

      +  rust: {

      +    ...goLangHandler,

      +    resolveImport: resolveImportFactory(['.rs', '/mod.rs']),

      +  },
         c: cLangHandler,
         cpp: cLangHandler,
       };
    patchStrategy: new-unified
snapshot:
  src/tree-sitter/language-config.ts: >-
    import type { Language } from 'web-tree-sitter';


    export interface LanguageConfig {
      name: string;
      extensions: string[];
      wasmPath: string;
      query: string;
    }


    export interface LoadedLanguage {
      config: LanguageConfig;
      language: Language;
    }


    export const LANGUAGE_CONFIGS: LanguageConfig[] = [
      {
        name: 'typescript',
        extensions: ['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs'],
        wasmPath: 'tree-sitter-typescript/tree-sitter-typescript.wasm',
        query: `
    (import_statement
      source: (string) @import.source) @import.statement

    (class_declaration) @class.definition

    (export_statement declaration: (class_declaration)) @class.definition


    (function_declaration) @function.definition

    (export_statement declaration: (function_declaration)) @function.definition


    (variable_declarator value: (arrow_function)) @function.arrow.definition

    (public_field_definition value: (arrow_function)) @function.arrow.definition

    (export_statement declaration: (lexical_declaration (variable_declarator
    value: (arrow_function)))) @function.arrow.definition


    (interface_declaration) @interface.definition

    (export_statement declaration: (interface_declaration))
    @interface.definition


    (type_alias_declaration) @type.definition

    (export_statement declaration: (type_alias_declaration)) @type.definition


    (method_definition) @method.definition

    (public_field_definition) @field.definition


    (variable_declarator) @variable.definition

    (export_statement declaration: (lexical_declaration (variable_declarator)))
    @variable.definition


    (call_expression
      function: (identifier) @function.call)
    `
      },
      {
        name: 'python',
        extensions: ['.py', '.pyw'],
        wasmPath: 'tree-sitter-python/tree-sitter-python.wasm',
        query: `
    (import_statement) @import.statement

    (import_from_statement) @import.statement


    (class_definition) @class.definition


    (function_definition) @function.definition


    (decorated_definition
      (function_definition)) @function.definition

    (decorated_definition
      (class_definition)) @class.definition
    `
      },
      {
        name: 'java',
        extensions: ['.java'],
        wasmPath: 'tree-sitter-java/tree-sitter-java.wasm',
        query: `
    (import_declaration) @import.statement


    (class_declaration) @class.definition

    (interface_declaration) @interface.definition

    (enum_declaration) @enum.definition


    (method_declaration) @method.definition

    (constructor_declaration) @constructor.definition


    (field_declaration) @field.definition

    `
      },
      {
        name: 'c',
        extensions: ['.c', '.h'],
        wasmPath: 'tree-sitter-c/tree-sitter-c.wasm',
        query: `
    (preproc_include) @import.statement


    (function_definition) @function.definition

    (declaration
      declarator: (function_declarator)) @function.declaration

    (struct_specifier) @struct.definition

    (union_specifier) @union.definition

    (enum_specifier) @enum.definition


    (type_definition) @type.definition

    `
      },
      {
        name: 'cpp',
        extensions: ['.cpp', '.cc', '.cxx', '.hpp', '.hh', '.hxx'],
        wasmPath: 'tree-sitter-cpp/tree-sitter-cpp.wasm',
        query: `
    (preproc_include) @import.statement


    (function_definition) @function.definition

    (declaration
      declarator: (function_declarator)) @function.declaration

    (class_specifier) @class.definition

    (struct_specifier) @struct.definition

    (union_specifier) @union.definition

    (enum_specifier) @enum.definition


    (namespace_definition) @namespace.definition


    (template_declaration) @template.definition


    (method_definition) @method.definition

    `
      },
      {
        name: 'go',
        extensions: ['.go'],
        wasmPath: 'tree-sitter-go/tree-sitter-go.wasm',
        query: `
    (import_declaration) @import.statement


    (function_declaration) @function.definition

    (method_declaration) @method.definition


    (type_declaration) @type.definition


    (var_declaration) @variable.definition

    (const_declaration) @constant.definition

    `
      },
      {
        name: 'rust',
        extensions: ['.rs'],
        wasmPath: 'tree-sitter-rust/tree-sitter-rust.wasm',
        query: `
    (use_declaration) @import.statement


    (function_item) @function.definition

    (impl_item) @impl.definition


    (struct_item) @struct.definition

    (enum_item) @enum.definition

    (trait_item) @trait.definition


    (type_item) @type.definition

    (const_item) @constant.definition

    (static_item) @static.definition


    (function_signature_item) @function.declaration

    `
      },
      {
        name: 'csharp',
        extensions: ['.cs'],
        wasmPath: 'tree-sitter-c-sharp/tree-sitter-c-sharp.wasm',
        query: `
    (using_directive) @import.statement


    (class_declaration) @class.definition

    (interface_declaration) @interface.definition

    (struct_declaration) @struct.definition

    (enum_declaration) @enum.definition


    (method_declaration) @method.definition

    (constructor_declaration) @constructor.definition


    (field_declaration) @field.definition

    (property_declaration) @property.definition


    (namespace_declaration) @namespace.definition

    `
      }
    ];


    /**
     * Get the language configuration for a given file extension
     */
    export function getLanguageConfigForFile(filePath: string): LanguageConfig |
    null {
      const extension = filePath.substring(filePath.lastIndexOf('.'));
      
      for (const config of LANGUAGE_CONFIGS) {
        if (config.extensions.includes(extension)) {
          return config;
        }
      }
      
      return null;
    }


    /**
     * Get all supported file extensions
     */
    export function getSupportedExtensions(): string[] {
      return LANGUAGE_CONFIGS.flatMap(config => config.extensions);
    }
  src/pipeline/analyze.ts: >-
    import path from 'node:path';

    import { createParserForLanguage } from '../tree-sitter/languages.js';

    import { getLanguageConfigForFile, type LanguageConfig } from
    '../tree-sitter/language-config.js';

    import type { Analyzer, CodeNode, CodeNodeType, FileContent, CodeEdge } from
    '../types.js';

    import type { Node as TSNode, QueryCapture as TSMatch } from
    'web-tree-sitter';

    import { logger } from '../utils/logger.util.js';

    import { ParserError } from '../utils/error.util.js';


    // --- UTILITY FUNCTIONS ---


    const getNodeText = (node: TSNode, content: string): string =>
    content.slice(node.startIndex, node.endIndex);

    const getLineFromIndex = (content: string, index: number): number =>
    content.substring(0, index).split('\n').length;


    // --- LANGUAGE-SPECIFIC LOGIC ---


    type LanguageHandler = {
      preProcessFile?: (file: FileContent, captures: TSMatch[]) => Record<string, any>;
      shouldSkipSymbol: (node: TSNode, symbolType: CodeNodeType, langName: string) => boolean;
      getSymbolNameNode: (declarationNode: TSNode, originalNode: TSNode) => TSNode | null;
      processComplexSymbol?: (context: ProcessSymbolContext) => boolean;
      resolveImport: (fromFile: string, importIdentifier: string, allFiles: string[]) => string | null;
    };


    type ProcessSymbolContext = {
      nodes: Map<string, CodeNode>;
      file: FileContent;
      node: TSNode;
      symbolType: CodeNodeType;
      processedSymbols: Set<string>;
      fileState: Record<string, any>;
    };


    const goLangHandler: Partial<LanguageHandler> = {
      getSymbolNameNode: (declarationNode: TSNode) => {
        const nodeType = declarationNode.type;
        if (['type_declaration', 'const_declaration', 'var_declaration'].includes(nodeType)) {
          const spec = declarationNode.namedChild(0);
          if (spec && ['type_spec', 'const_spec', 'var_spec'].includes(spec.type)) {
            return spec.childForFieldName('name');
          }
        }
        return declarationNode.childForFieldName('name');
      },
    };


    const cLangHandler: Partial<LanguageHandler> = {
      getSymbolNameNode: (declarationNode: TSNode) => {
        if (declarationNode.type === 'type_definition') {
          const lastChild = declarationNode.namedChild(declarationNode.namedChildCount - 1);
          if (lastChild?.type === 'type_identifier') return lastChild;
        }
        if (declarationNode.type === 'function_definition') {
          const declarator = declarationNode.childForFieldName('declarator');
          if (declarator?.type === 'function_declarator') {
            const nameNode = declarator.childForFieldName('declarator');
            if (nameNode?.type === 'identifier') return nameNode;
          }
        }
        return declarationNode.childForFieldName('name');
      },
    };


    const tsLangHandler: Partial<LanguageHandler> = {
      preProcessFile: (_file, captures) => {
        const classNames = new Map<string, number>();
        const duplicateClassNames = new Set<string>();
        const seenClassNodes = new Set<number>();

        for (const { name, node } of captures) {
          if (name === 'class.definition') {
            let classNode = node.type === 'export_statement' ? (node.namedChildren[0] ?? node) : node;
            if (classNode.type === 'class_declaration' && !seenClassNodes.has(classNode.startIndex)) {
              seenClassNodes.add(classNode.startIndex);
              const nameNode = classNode.childForFieldName('name');
              if (nameNode) {
                const className = nameNode.text;
                const count = classNames.get(className) || 0;
                classNames.set(className, count + 1);
                if (count + 1 > 1) duplicateClassNames.add(className);
              }
            }
          }
        }
        return { duplicateClassNames };
      },
      shouldSkipSymbol: (node, symbolType, langName) => {
        if (langName !== 'typescript') return false;
        const valueNode = node.childForFieldName('value');
        if (valueNode?.type !== 'arrow_function') return false;
        return (symbolType === 'field' && node.type === 'public_field_definition') ||
          (symbolType === 'variable' && node.type === 'variable_declarator');
      },
      getSymbolNameNode: (declarationNode, originalNode) => {
        if (originalNode.type === 'variable_declarator' || originalNode.type === 'public_field_definition') { // Arrow function
          return originalNode.childForFieldName('name');
        }
        if (declarationNode.type === 'export_statement') {
          const lexicalDecl = declarationNode.namedChildren[0];
          if (lexicalDecl?.type === 'lexical_declaration') {
            const varDeclarator = lexicalDecl.namedChildren[0];
            if (varDeclarator?.type === 'variable_declarator') {
              return varDeclarator.childForFieldName('name');
            }
          }
        }
        return declarationNode.childForFieldName('name');
      },
      processComplexSymbol: ({ nodes, file, node, symbolType, processedSymbols, fileState }) => {
        if (symbolType !== 'method' && symbolType !== 'field') return false;
        const classParent = node.parent?.parent; // class_body -> class_declaration
        if (classParent?.type === 'class_declaration') {
          const classNameNode = classParent.childForFieldName('name');
          if (classNameNode) {
            const className = classNameNode.text;
            const nameNode = node.childForFieldName('name');
            // The check for duplicateClassNames is important to avoid ambiguity.
            // We remove the dependency on checking if the class has been processed first,
            // because the order of captures from tree-sitter is not guaranteed to be in source order.
            // This makes the analysis more robust.
            if (nameNode && !fileState['duplicateClassNames']?.has(className)) {
              const methodName = nameNode.text;
              const symbolName = `${className}.${methodName}`;
              const symbolId = `${file.path}#${symbolName}`;
              if (!processedSymbols.has(symbolId) && !nodes.has(symbolId)) {
                processedSymbols.add(symbolId);
                nodes.set(symbolId, {
                  id: symbolId, type: symbolType, name: symbolName, filePath: file.path,
                  startLine: getLineFromIndex(file.content, node.startIndex),
                  endLine: getLineFromIndex(file.content, node.endIndex),
                  codeSnippet: node.text?.split('{')[0]?.trim() || '',
                });
              }
            }
          }
        }
        return true;
      },
    };


    const resolveImportFactory = (endings: string[], packageStyle: boolean =
    false) => (fromFile: string, sourcePath: string, allFiles: string[]): string
    | null => {
      const basedir = path.dirname(fromFile);
      const resolvedPathAsIs = path.normalize(path.join(basedir, sourcePath));
      if (allFiles.includes(resolvedPathAsIs)) return resolvedPathAsIs;

      const parsedSourcePath = path.parse(sourcePath);
      const basePath = path.normalize(path.join(basedir, parsedSourcePath.dir, parsedSourcePath.name));
      for (const end of endings) {
        const potentialPath = basePath + end;
        if (allFiles.includes(potentialPath)) return potentialPath;
      }
      
      if (packageStyle && sourcePath.includes('.')) {
        const packagePath = sourcePath.replace(/\./g, '/');
        for (const end of endings) {
          const fileFromRoot = packagePath + end;
          if (allFiles.includes(fileFromRoot)) return fileFromRoot;
        }
      }
      return null;
    }


    const languageHandlers: Record<string, Partial<LanguageHandler>> = {
      default: {
        shouldSkipSymbol: () => false,
        getSymbolNameNode: (declarationNode) => declarationNode.childForFieldName('name'),
        resolveImport: (fromFile, sourcePath, allFiles) => {
          const resolvedPathAsIs = path.normalize(path.join(path.dirname(fromFile), sourcePath));
          return allFiles.includes(resolvedPathAsIs) ? resolvedPathAsIs : null;
        }
      },
      typescript: {
        ...tsLangHandler,
        resolveImport: resolveImportFactory(['.ts', '.tsx', '/index.ts', '/index.tsx', '.js', '.jsx', '.mjs', '.cjs']),
      },
      javascript: {
        resolveImport: resolveImportFactory(['.js', '.jsx', '/index.js', '/index.jsx', '.mjs', '.cjs']),
      },
      python: { resolveImport: resolveImportFactory(['.py', '/__init__.py']) },
      java: { resolveImport: resolveImportFactory(['.java'], true) },
      csharp: { resolveImport: resolveImportFactory(['.cs'], true) },
      go: goLangHandler,
      rust: { resolveImport: resolveImportFactory(['.rs', '/mod.rs']) },
      c: cLangHandler,
      cpp: cLangHandler,
    };


    const getLangHandler = (langName: string): LanguageHandler => ({
      ...languageHandlers['default'],
      ...languageHandlers[langName],
    } as LanguageHandler);


    /**
     * Creates the default Tree-sitter based analyzer. It parses files to find
     * symbols (nodes) and their relationships (edges), constructing a CodeGraph.
     * Supports multiple programming languages.
     * @returns An Analyzer function.
     */
    export const createTreeSitterAnalyzer = (): Analyzer => {
      return async (files: readonly FileContent[]) => {
        const nodes = new Map<string, CodeNode>();
        const edges: CodeEdge[] = [];
        const allFilePaths = files.map(f => f.path);

        // Phase 1: Add all files as nodes
        for (const file of files) {
          const langConfig = getLanguageConfigForFile(file.path);
          nodes.set(file.path, {
            id: file.path, type: 'file', name: path.basename(file.path),
            filePath: file.path, startLine: 1, endLine: file.content.split('\n').length,
            language: langConfig?.name,
          });
        }

        // Phase 2: Group files by language
        const filesByLanguage = files.reduce((acc, file) => {
          const langConfig = getLanguageConfigForFile(file.path);
          if (langConfig) {
            if (!acc.has(langConfig.name)) acc.set(langConfig.name, []);
            acc.get(langConfig.name)!.push(file);
          }
          return acc;
        }, new Map<string, FileContent[]>());

        // Phase 3: Parse all files once
        const fileParseData = new Map<string, { file: FileContent; captures: TSMatch[]; langConfig: LanguageConfig }>();
        for (const [langName, langFiles] of filesByLanguage.entries()) {
          const langConfig = getLanguageConfigForFile(langFiles[0]!.path);
          if (!langConfig) continue;
          try {
            const parser = await createParserForLanguage(langConfig);
            if (!parser.language) continue;
            const query = new (await import('web-tree-sitter')).Query(parser.language, langConfig.query);
            for (const file of langFiles) {
              const tree = parser.parse(file.content);
              if (tree) fileParseData.set(file.path, { file, captures: query.captures(tree.rootNode), langConfig });
            }
          } catch (error) {
            logger.warn(new ParserError(`Failed to process ${langName} files`, langName, error));
          }
        }

        // Phase 4: Process definitions for all files
        for (const { file, captures, langConfig } of fileParseData.values()) {
          processFileDefinitions({ nodes }, file, captures, langConfig);
        }
        
        // Phase 5: Process relationships for all files
        const resolver = new SymbolResolver(nodes, edges);
        for (const { file, captures, langConfig } of fileParseData.values()) {
          processFileRelationships({ nodes, edges }, file, captures, langConfig, resolver, allFilePaths);
        }

        return { nodes: Object.freeze(nodes), edges: Object.freeze(edges) };
      };
    };


    /**
     * Process symbol definitions for a single file.
     */
    function processFileDefinitions(
      graph: { nodes: Map<string, CodeNode> },
      file: FileContent,
      captures: TSMatch[],
      langConfig: LanguageConfig
    ): void {
      const handler = getLangHandler(langConfig.name);
      const fileState = handler.preProcessFile?.(file, captures) || {};
      const processedSymbols = new Set<string>();

      for (const { name, node } of captures) {
        const parts = name.split('.');
        if (parts[parts.length - 1] !== 'definition') continue;

        const type = parts.slice(0, -1).join('.');
        const symbolType = getSymbolTypeFromCapture(name, type);
        if (!symbolType) continue;

        processSymbol(
          { ...graph, file, node, symbolType, processedSymbols, fileState },
          langConfig
        );
      }
    }


    /**
     * Process a single symbol definition.
     */
    function processSymbol(context: ProcessSymbolContext, langConfig:
    LanguageConfig): void {
      const { nodes, file, node, symbolType, processedSymbols } = context;
      const handler = getLangHandler(langConfig.name);

      if (handler.shouldSkipSymbol(node, symbolType, langConfig.name)) return;
      if (handler.processComplexSymbol?.(context)) return;

      let declarationNode = node;
      if (node.type === 'export_statement') {
        declarationNode = node.namedChildren[0] ?? node;
      }
      
      const nameNode = handler.getSymbolNameNode(declarationNode, node);
      if (!nameNode) return;

      const symbolName = nameNode.text;
      const symbolId = `${file.path}#${symbolName}`;

      if (symbolName && !processedSymbols.has(symbolId) && !nodes.has(symbolId)) {
        processedSymbols.add(symbolId);
        nodes.set(symbolId, {
          id: symbolId, type: symbolType, name: symbolName, filePath: file.path,
          startLine: getLineFromIndex(file.content, node.startIndex),
          endLine: getLineFromIndex(file.content, node.endIndex),
          codeSnippet: node.text?.split('{')[0]?.trim() || '',
        });
      }
    }


    /**
     * Process relationships (imports, calls, inheritance) for a single file.
     */
    function processFileRelationships(
      graph: { nodes: Map<string, CodeNode>, edges: CodeEdge[] },
      file: FileContent,
      captures: TSMatch[],
      langConfig: LanguageConfig,
      resolver: SymbolResolver,
      allFilePaths: string[]
    ): void {
      const handler = getLangHandler(langConfig.name);
      for (const { name, node } of captures) {
        const parts = name.split('.');
        const type = parts.slice(0, -1).join('.');
        const subtype = parts[parts.length - 1];

        if (type === 'import' && subtype === 'source') {
          const importIdentifier = getNodeText(node, file.content).replace(/['"`]/g, '');
          const importedFilePath = handler.resolveImport(file.path, importIdentifier, allFilePaths);
          if (importedFilePath && graph.nodes.has(importedFilePath)) {
            const edge: CodeEdge = { fromId: file.path, toId: importedFilePath, type: 'imports' };
            if (!graph.edges.some(e => e.fromId === edge.fromId && e.toId === edge.toId)) {
              graph.edges.push(edge);
            }
          }
          continue;
        }

        if (subtype && ['inheritance', 'implementation', 'call'].includes(subtype)) {
          const fromId = findEnclosingSymbolId(node, file, graph.nodes);
          if (!fromId) continue;
          const toName = getNodeText(node, file.content).replace(/<.*>$/, '');
          const toNode = resolver.resolve(toName, file.path);
          if (!toNode) continue;
          
          const edgeType = subtype === 'inheritance' ? 'inherits' : subtype === 'implementation' ? 'implements' : 'calls';
          const edge: CodeEdge = { fromId, toId: toNode.id, type: edgeType };
          if (!graph.edges.some(e => e.fromId === edge.fromId && e.toId === edge.toId)) {
            graph.edges.push(edge);
          }
        }
      }
    }


    /**
     * Get symbol type from capture name and language.
     */
    function getSymbolTypeFromCapture(captureName: string, type: string):
    CodeNodeType | null {
      const baseMap = new Map<string, CodeNodeType>([
        ['class', 'class'],
        ['function', 'function'],
        ['function.arrow', 'arrow_function'],
        ['interface', 'interface'],
        ['type', 'type'],
        ['method', 'method'],
        ['field', 'field'],
        ['struct', 'struct'],
        ['enum', 'enum'],
        ['namespace', 'namespace'],
        ['trait', 'trait'],
        ['impl', 'impl'],
        ['constructor', 'constructor'],
        ['property', 'property'],
        ['variable', 'variable'],
        ['constant', 'constant'],
        ['static', 'static'],
        ['union', 'union'],
        ['template', 'template'],
      ]);
      return baseMap.get(captureName) ?? baseMap.get(type) ?? null;
    }


    /**
     * A best-effort symbol resolver to find the ID of a referenced symbol.
     */
    class SymbolResolver {
      constructor(
        private nodes: ReadonlyMap<string, CodeNode>,
        private edges: readonly CodeEdge[],
      ) {}

      resolve(symbolName: string, contextFile: string): CodeNode | null {
        const sameFileId = `${contextFile}#${symbolName}`;
        if (this.nodes.has(sameFileId)) return this.nodes.get(sameFileId)!;

        const importedFiles = this.edges.filter(e => e.fromId === contextFile && e.type === 'imports').map(e => e.toId);
        for (const file of importedFiles) {
          const importedId = `${file}#${symbolName}`;
          if (this.nodes.has(importedId)) return this.nodes.get(importedId)!;
        }

        for (const node of this.nodes.values()) {
          if (node.name === symbolName && ['class', 'function', 'interface', 'struct', 'type', 'enum'].includes(node.type)) {
            return node;
          }
        }
        return null;
      }
    }


    /**
     * Traverses up the AST from a start node to find the enclosing symbol definition
     * and returns its unique ID.
     */
    function findEnclosingSymbolId(startNode: TSNode, file: FileContent, nodes:
    ReadonlyMap<string, CodeNode>): string | null {
      let current: TSNode | null = startNode.parent;
      while (current) {
        const nameNode = current.childForFieldName('name');
        if (nameNode) {
          let symbolName = nameNode.text;
          if (current.type === 'method_definition' || (current.type === 'public_field_definition' && !current.text.includes('=>'))) {
            const classNode = current.parent?.parent; // class_body -> class_declaration
            if (classNode?.type === 'class_declaration') {
              symbolName = `${classNode.childForFieldName('name')?.text}.${symbolName}`;
            }
          }
          const symbolId = `${file.path}#${symbolName}`;
          if (nodes.has(symbolId)) return symbolId;
        }
        current = current.parent;
      }
      return file.path; // Fallback to file node
    }
approved: true
