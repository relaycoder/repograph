uuid: b859666f-c1f5-46f3-a74c-474c73f309a4
projectId: repograph
createdAt: '2025-06-29T02:03:11.647Z'
gitCommitMsg: 'fix(core): Address multiple test failures across pipeline'
promptSummary: >-
  Fix a large number of failing tests by addressing core issues in the
  discovery, analysis, and ranking stages of the codemap generation pipeline.
reasoning:
  - >-
    Based on the test failures, it appears there are several related issues
    across the analysis, ranking, and discovery pipeline stages. Here is my
    step-by-step plan to address them:
  - >-
    1.  **Discovery Fix**: The file discoverer is incorrectly including
    `.gitignore` files in its results. I will update `discover.ts` to explicitly
    ignore `.gitignore` and `.git` directories.
  - >-
    2.  **Analysis Fix (Queries)**: The Tree-sitter queries are failing to
    identify all types of arrow functions (e.g., as class properties). I will
    update `src/tree-sitter/queries.ts` to be more comprehensive.
  - '3.  **Analysis Fix (Core Logic)**:'
  - >-
    *   The graph should be a `multi-graph` to correctly represent multiple
    imports between the same files. I'll change the graph creation in
    `analyze.ts` to `multi: true`.
  - >-
    *   The logic for processing symbols, especially arrow functions, will be
    updated in `analyze.ts` to work with the improved queries.
  - >-
    *   The module resolution for imports is too simplistic and fails to resolve
    `.js` extensions to `.ts` source files correctly. I will improve this logic.
  - >-
    4.  **Ranking Fix**: The `pagerank` library does not support multi-graphs.
    Since the analysis will now correctly produce a multi-graph, I will update
    the `createPageRanker` in `rank.ts` to convert the multi-graph to a simple
    graph before running the algorithm.
  - >-
    These core fixes should resolve the cascading failures seen in the unit,
    integration, and e2e tests.
  - >-
    First, I'll adjust the file discovery to ignore `.gitignore` and `.git`
    files.
  - >-
    Next, I'll update the Tree-sitter queries to correctly identify more
    function types.
  - >-
    Now, I'll modify the analyzer to use a multi-graph, improve import
    resolution, and align with the new queries.
  - >-
    Finally, I'll update the ranker to handle multi-graphs, which fixes the
    `pagerank` errors.
  - >-
    These changes address the root causes of the test failures. The e2e and
    integration tests were failing because the underlying pipeline components
    had bugs. With these fixes, the entire testing suite should now pass.
operations:
  - type: write
    path: src/pipeline/discover.ts
    content: >-
      --- a/src/pipeline/discover.ts

      +++ b/src/pipeline/discover.ts

      @@ -40,7 +40,7 @@
           const relativePaths = await globby(patterns, {
             cwd: root,
             gitignore: false, // We handle gitignore manually with the `ignore` package
      -      ignore: [...(ignore || []), '**/node_modules/**'],

      +      ignore: [...(ignore || []), '**/node_modules/**', '**/.git/**',
      '.gitignore'],
             dot: true,
             absolute: false,
           });
    patchStrategy: new-unified
  - type: write
    path: src/tree-sitter/queries.ts
    content: >-
      --- a/src/tree-sitter/queries.ts

      +++ b/src/tree-sitter/queries.ts

      @@ -8,11 +8,9 @@
       (function_declaration) @function.definition
       (export_statement declaration: (function_declaration)) @function.definition
       
      -(lexical_declaration (variable_declarator value: (arrow_function)))
      @function.arrow.definition

      -(export_statement declaration: (lexical_declaration (variable_declarator
      value: (arrow_function)))) @function.arrow.definition

      +(variable_declarator value: (arrow_function)) @function.arrow.definition

      +(public_field_definition value: (arrow_function))
      @function.arrow.definition
       
       (interface_declaration) @interface.definition
       (export_statement declaration: (interface_declaration)) @interface.definition
       
       (type_alias_declaration) @type.definition
       (export_statement declaration: (type_alias_declaration)) @type.definition
    patchStrategy: new-unified
  - type: write
    path: src/pipeline/analyze.ts
    content: >-
      --- a/src/pipeline/analyze.ts

      +++ b/src/pipeline/analyze.ts

      @@ -11,6 +11,7 @@
         return content.substring(0, index).split('\n').length;
       };
       
      +
       /**
        * Creates the default Tree-sitter based analyzer. It parses files to find
        * symbols (nodes) and their relationships (edges), constructing a CodeGraph.
      @@ -25,7 +26,7 @@
           const graph: Graph<CodeNode> = new Graph({
             allowSelfLoops: false,
             type: 'directed',
      -      multi: false,

      +      multi: true,
           });
       
           // Phase 1: Add all files as nodes
      @@ -52,7 +53,16 @@
               if (type === 'import' && subtype === 'source') {
                 const sourcePath = getNodeText(node, file.content).replace(/['"`]/g, '');
                 const fromFileId = file.path;
      -          const toFileId = path.join(path.dirname(fromFileId),
      sourcePath).replace(/\.(ts|js)x?$/, '') + '.ts'; // Simplistic resolution

      +          let toFileId =
      path.normalize(path.join(path.dirname(fromFileId), sourcePath));

      +          

      +          if (/\.(js|jsx|mjs)$/.test(toFileId)) {

      +            const tsVariant = toFileId.replace(/\.(js|jsx|mjs)$/, '.ts');

      +            if (graph.hasNode(tsVariant)) toFileId = tsVariant;

      +          }

      +          // Handle extensionless imports

      +          if (!path.extname(toFileId) && graph.hasNode(`${toFileId}.ts`))
      {

      +            toFileId = `${toFileId}.ts`;

      +          }
                  
                 if (graph.hasNode(toFileId)) {
                   if (!graph.hasEdge(fromFileId, toFileId)) {
      @@ -75,18 +85,21 @@
               const symbolType = definitionMap[type!];
               if (!symbolType) continue;
       
      -        // For exports, the actual declaration is nested.

      -        const declarationNode = node.type === 'export_statement' ?
      node.namedChildren[0] : node;

      -        if (!declarationNode) continue;

      +        let declarationNode = node;

      +        // For non-arrow functions, the captured node might be an export
      statement,

      +        // so we need to get the actual declaration.

      +        if (symbolType !== 'arrow_function' && declarationNode.type ===
      'export_statement') {

      +          declarationNode = declarationNode.namedChildren[0] ??
      declarationNode;

      +        }
       
      -        const nameNode = declarationNode.childForFieldName('name') ??
      declarationNode.firstNamedChild?.childForFieldName('name');

      +        const nameNode = declarationNode.childForFieldName('name');
       
               if (nameNode) {
                 const symbolName = nameNode.text;
                 const symbolId = `${file.path}#${symbolName}`;
      -          if (!graph.hasNode(symbolId)) {

      +          if (symbolName && !graph.hasNode(symbolId)) {
                   graph.addNode(symbolId, {
                     id: symbolId, type: symbolType, name: symbolName, filePath: file.path,
                     startLine: getLineFromIndex(file.content, node.startIndex),
      @@ -98,6 +111,7 @@
             }
           }
           return graph;
      +
         };
       };
    patchStrategy: new-unified
  - type: write
    path: src/pipeline/rank.ts
    content: >-
      --- a/src/pipeline/rank.ts

      +++ b/src/pipeline/rank.ts

      @@ -1,5 +1,6 @@
       import pagerank from 'graphology-pagerank';
       import type { CodeGraph, Ranker, RankedCodeGraph } from '../types.js';
      +import Graph from 'graphology';
       import { execSync } from 'node:child_process';
       
       /**
      @@ -12,7 +13,21 @@
           if (graph.order === 0) {
             return { graph, ranks: new Map() };
           }
      -    const ranksData = pagerank(graph);

      +

      +    // Pagerank doesn't work on multi-graphs, so we need a simplified
      representation.

      +    let graphForRank: CodeGraph = graph;

      +    if (graph.multi) {

      +      const simpleGraph = new Graph({ type: 'directed' });

      +      graph.forEachNode((node, attrs) => simpleGraph.addNode(node,
      attrs));

      +      graph.forEachEdge((_edge, _attrs, source, target) => {

      +        if (!simpleGraph.hasEdge(source, target)) {

      +          simpleGraph.addDirectedEdge(source, target);

      +        }

      +      });

      +      graphForRank = simpleGraph;

      +    }

      +

      +    const ranksData = pagerank(graphForRank);
           const ranks = new Map<string, number>();
           for (const node in ranksData) {
             ranks.set(node, ranksData[node] ?? 0);
    patchStrategy: new-unified
snapshot:
  src/pipeline/discover.ts: |-
    import { globby } from 'globby';
    import path from 'node:path';
    import fs from 'node:fs/promises';
    import Ignore from 'ignore';
    import type { FileContent, FileDiscoverer } from '../types.js';

    const readGitignore = async (root: string): Promise<string> => {
      try {
        return await fs.readFile(path.join(root, '.gitignore'), 'utf-8');
      } catch {
        return '';
      }
    };

    /**
     * Creates the default file discoverer. It uses globby to find all files,
     * respecting .gitignore patterns and custom include/exclude rules.
     * @returns A FileDiscoverer function.
     */
    export const createDefaultDiscoverer = (): FileDiscoverer => {
      return async ({ root, include, ignore, noGitignore = false }) => {
        try {
          const stats = await fs.stat(root);
          if (!stats.isDirectory()) {
            throw new Error(`Root path is not a directory: ${root}`);
          }
        } catch (e) {
          // Type guard to check for Node.js file system error
          if (e && typeof e === 'object' && 'code' in e && e.code === 'ENOENT') {
            throw new Error(`Root directory does not exist: ${root}`);
          } else {
            throw e;
          }
        }
        const patterns = include && include.length > 0 ? [...include] : ['**/*'];
        
        const ignoreFilter = Ignore();
        if (!noGitignore) {
          const gitignoreContent = await readGitignore(root);
          ignoreFilter.add(gitignoreContent);
        }
        if (ignore) {
          ignoreFilter.add(ignore.join('\n'));
        }

        const relativePaths = await globby(patterns, {
          cwd: root,
          gitignore: false, // We handle gitignore manually with the `ignore` package
          ignore: [...(ignore || []), '**/node_modules/**'],
          dot: true,
          absolute: false,
        });

        const filteredPaths = relativePaths.filter(p => !ignoreFilter.ignores(p));

        const fileContents = await Promise.all(
          filteredPaths.map(async (relativePath): Promise<FileContent | null> => {
            try {
              const absolutePath = path.join(root, relativePath);
              const buffer = await fs.readFile(absolutePath);
              // A simple heuristic to filter out binary files is checking for a null byte.
              if (buffer.includes(0)) return null;
              const content = buffer.toString('utf-8');
              return { path: relativePath, content };
            } catch {
              // Ignore files that can't be read (e.g., binary files, permission errors)
              return null;
            }
          })
        );

        return fileContents.filter((c): c is FileContent => c !== null);
      };
    };
  src/tree-sitter/queries.ts: >-
    /**
     * Tree-sitter query for TypeScript and JavaScript to capture key symbols.
     * This query is designed to find definitions of classes, functions, interfaces,
     * and import statements to build the code graph.
     */
    export const TS_QUERY = `

    (import_statement
      source: (string) @import.source) @import.statement

    (class_declaration) @class.definition

    (export_statement declaration: (class_declaration)) @class.definition


    (function_declaration) @function.definition

    (export_statement declaration: (function_declaration)) @function.definition


    (lexical_declaration (variable_declarator value: (arrow_function)))
    @function.arrow.definition

    (export_statement declaration: (lexical_declaration (variable_declarator
    value: (arrow_function)))) @function.arrow.definition


    (interface_declaration) @interface.definition

    (export_statement declaration: (interface_declaration))
    @interface.definition


    (type_alias_declaration) @type.definition

    (export_statement declaration: (type_alias_declaration)) @type.definition

    `;
  src/pipeline/analyze.ts: >-
    import Graph from 'graphology';

    import path from 'node:path';

    import { getParser } from '../tree-sitter/languages.js';

    import { TS_QUERY } from '../tree-sitter/queries.js';

    import type { Analyzer, CodeNode, CodeNodeType, FileContent } from
    '../types.js';


    const getNodeText = (node: import('web-tree-sitter').Node, content: string):
    string => {
      return content.slice(node.startIndex, node.endIndex);
    };


    const getLineFromIndex = (content: string, index: number): number => {
      return content.substring(0, index).split('\n').length;
    };


    /**
     * Creates the default Tree-sitter based analyzer. It parses files to find
     * symbols (nodes) and their relationships (edges), constructing a CodeGraph.
     * @returns An Analyzer function.
     */
    export const createTreeSitterAnalyzer = (): Analyzer => {
      return async (files: readonly FileContent[]) => {
        const parser = await getParser();
        const tsLang = parser.language;
        if (!tsLang) {
          throw new Error('Parser language not set');
        }
        const query = tsLang.query(TS_QUERY);

        const graph: Graph<CodeNode> = new Graph({
          allowSelfLoops: false,
          type: 'directed',
          multi: false,
        });

        // Phase 1: Add all files as nodes
        for (const file of files) {
          const fileId = file.path;
          if (!graph.hasNode(fileId)) {
            graph.addNode(fileId, {
              id: fileId,
              type: 'file',
              name: path.basename(file.path),
              filePath: file.path,
              startLine: 1,
              endLine: file.content.split('\n').length,
            });
          }
        }

        // Phase 2: Parse files and add symbol nodes and edges
        for (const file of files) {
          const tree = parser.parse(file.content);
          if (!tree) {
            continue; // Skip files that couldn't be parsed
          }
          const captures = query.captures(tree.rootNode);

          const processedDefinitions = new Set<number>();

          for (const { name, node } of captures) {
            const [type, subtype] = name.split('.');
            
            if (type === 'import' && subtype === 'source') {
              const sourcePath = getNodeText(node, file.content).replace(/['"`]/g, '');
              const fromFileId = file.path;
              const toFileId = path.join(path.dirname(fromFileId), sourcePath).replace(/\.(ts|js)x?$/, '') + '.ts'; // Simplistic resolution
               
              if (graph.hasNode(toFileId)) {
                if (!graph.hasEdge(fromFileId, toFileId)) {
                  graph.addDirectedEdge(fromFileId, toFileId, { type: 'imports' });
                }
              }
              continue;
            }

            if (subtype !== 'definition') continue;
            if (processedDefinitions.has(node.startIndex)) continue;
            processedDefinitions.add(node.startIndex);

            const definitionMap: Record<string, CodeNodeType> = {
              class: 'class',
              function: 'function',
              'function.arrow': 'arrow_function',
              interface: 'interface',
              type: 'type',
            };
            const symbolType = definitionMap[type!];
            if (!symbolType) continue;

            // For exports, the actual declaration is nested.
            const declarationNode = node.type === 'export_statement' ? node.namedChildren[0] : node;
            if (!declarationNode) continue;

            const nameNode = declarationNode.childForFieldName('name') ?? declarationNode.firstNamedChild?.childForFieldName('name');

            if (nameNode) {
              const symbolName = nameNode.text;
              const symbolId = `${file.path}#${symbolName}`;
              if (!graph.hasNode(symbolId)) {
                graph.addNode(symbolId, {
                  id: symbolId, type: symbolType, name: symbolName, filePath: file.path,
                  startLine: getLineFromIndex(file.content, node.startIndex),
                  endLine: getLineFromIndex(file.content, node.endIndex),
                  codeSnippet: node.text?.split('{')[0]?.trim() || '',
                });
                graph.addDirectedEdge(file.path, symbolId, { type: 'contains' });
              }
            }
          }
        }
        return graph;
      };
    };
  src/pipeline/rank.ts: >-
    import pagerank from 'graphology-pagerank';

    import type { CodeGraph, Ranker, RankedCodeGraph } from '../types.js';

    import { execSync } from 'node:child_process';


    /**
     * Creates a ranker that uses the PageRank algorithm. Nodes that are heavily
     * referenced by other important nodes will receive a higher rank.
     * @returns A Ranker function.
     */
    export const createPageRanker = (): Ranker => {
      return async (graph: CodeGraph): Promise<RankedCodeGraph> => {
        // PageRank can only be computed on graphs with nodes.
        if (graph.order === 0) {
          return { graph, ranks: new Map() };
        }
        const ranksData = pagerank(graph);
        const ranks = new Map<string, number>();
        for (const node in ranksData) {
          ranks.set(node, ranksData[node] ?? 0);
        }
        return { graph, ranks };
      };
    };


    /**
     * Creates a ranker based on Git commit history. Files changed more frequently
     * are considered more important. Requires Git to be installed.
     * @returns A Ranker function.
     */
    export const createGitRanker = (options: { maxCommits?: number } = {}):
    Ranker => {
      return async (graph: CodeGraph): Promise<RankedCodeGraph> => {
        const { maxCommits = 500 } = options;
        const ranks = new Map<string, number>();
        
        try {
          const command = `git log --max-count=${maxCommits} --name-only --pretty=format:`;
          const output = execSync(command, { encoding: 'utf-8' });
          const files = output.split('\n').filter(Boolean);

          const changeCounts: Record<string, number> = {};
          for (const file of files) {
            changeCounts[file] = (changeCounts[file] || 0) + 1;
          }
          
          const maxChanges = Math.max(...Object.values(changeCounts), 1);
          
          graph.forEachNode((nodeId, attributes) => {
            // We only rank file nodes with this strategy
            if (attributes.type === 'file') {
              const count = changeCounts[attributes.filePath] || 0;
              ranks.set(nodeId, count / maxChanges); // Normalize score
            } else {
              ranks.set(nodeId, 0);
            }
          });

        } catch (e) {
          console.warn('Git command failed. Could not generate git-based ranks. Is git installed?');
          graph.forEachNode((nodeId) => ranks.set(nodeId, 0));
        }
        
        return { graph, ranks };
      };
    };
approved: true
