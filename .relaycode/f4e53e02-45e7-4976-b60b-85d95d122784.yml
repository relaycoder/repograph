uuid: f4e53e02-45e7-4976-b60b-85d95d122784
projectId: repograph
createdAt: '2025-06-29T15:14:13.740Z'
gitCommitMsg: 'feat(renderer): add extensive output customization options'
promptSummary: >-
  The user wants to make the output format highly customizable through the CLI,
  high-level, and low-level APIs. This includes toggling markdown sections,
  customizing separators, and controlling the level of detail for AST
  components.
reasoning:
  - >-
    I understood that the goal was to make the output format highly customizable
    across all APIs (CLI, high-level, and low-level). To achieve this, I
    implemented the following changes:
  - >-
    1.  **Expanded `RendererOptions` in `src/types.ts`**: I began by defining a
    more granular `RendererOptions` type. This new type includes booleans to
    toggle major sections of the report (header, overview, Mermaid graph, file
    list, symbol details), options to configure the top file count and section
    separators, and a nested object for fine-grained control over how individual
    symbols are rendered (toggling relations, line numbers, and code snippets).
  - >-
    2.  **Updated `createMarkdownRenderer` in `src/pipeline/render.ts`**: I then
    modified the Markdown renderer to respect all the new options. I
    destructured the `RendererOptions` with default values at the beginning of
    the function. The markdown generation logic was then wrapped in conditional
    blocks (`if (include... )`) based on these options. I also updated the
    symbol detail generation to conditionally build the output string
    piece-by-piece, respecting the new `symbolDetailOptions`.
  - >-
    3.  **Enhanced the CLI in `src/index.ts`**: Finally, to expose this new
    flexibility to the command line, I updated the CLI logic.
  - >-
    *   I expanded the `--help` message to document all the new formatting
    flags.
  - >-
    *   I augmented the argument parsing loop to recognize flags like
    `--no-header`, `--top-file-count`, and `--no-symbol-relations`, and to build
    a mutable `rendererOptions` object from them.
  - >-
    *   This `rendererOptions` object is then attached to the main `options`
    object, which flows through the high-level `executeGenerateMap` function
    down to the renderer.
  - >-
    These changes ensure that users can now precisely control the appearance and
    content of their generated RepoGraph map, whether they are using the CLI for
    a quick analysis or the programmatic APIs for integration into more complex
    workflows.
operations:
  - type: write
    path: src/index.ts
    content: |-
      <<<<<<< SEARCH
      :start_line: 41
      :end_line: 55
        if (args.includes('--help') || args.includes('-h')) {
          console.log(`
      Usage: repograph [root] [options]

      Arguments:
        root                     The root directory of the repository to analyze. Defaults to the current working directory.

      Options:
        -h, --help               Display this help message.
        -v, --version            Display the version number.
        --output <path>          Path to the output Markdown file. (default: "repograph.md")
        --include <pattern>      Glob pattern for files to include. Can be specified multiple times.
        --ignore <pattern>       Glob pattern for files to ignore. Can be specified multiple times.
        --no-gitignore           Do not respect .gitignore files.
        --ranking-strategy <name> The ranking strategy to use. (default: "pagerank", options: "pagerank", "git-changes")
          `);
          process.exit(0);
        }
      =======
        if (args.includes('--help') || args.includes('-h')) {
          console.log(`
      Usage: repograph [root] [options]

      Arguments:
        root                     The root directory of the repository to analyze. Defaults to the current working directory.

      Options:
        -h, --help               Display this help message.
        -v, --version            Display the version number.
        --output <path>          Path to the output Markdown file. (default: "repograph.md")
        --include <pattern>      Glob pattern for files to include. Can be specified multiple times.
        --ignore <pattern>       Glob pattern for files to ignore. Can be specified multiple times.
        --no-gitignore           Do not respect .gitignore files.
        --ranking-strategy <name> The ranking strategy to use. (default: "pagerank", options: "pagerank", "git-changes")

      Output Formatting:
        --no-header              Do not include the main "RepoGraph" header.
        --no-overview            Do not include the project overview section.
        --no-mermaid             Do not include the Mermaid dependency graph.
        --no-file-list           Do not include the list of top-ranked files.
        --no-symbol-details      Do not include the detailed file and symbol breakdown.
        --top-file-count <num>   Set the number of files in the top list. (default: 10)
        --file-section-separator <str> Custom separator for file sections. (default: "---")
        --no-symbol-relations    Hide symbol relationship details (e.g., calls, implements).
        --no-symbol-line-numbers Hide line numbers for symbols.
        --no-symbol-snippets     Hide code snippets for symbols.
        --max-relations-to-show <num> Max number of 'calls' relations to show per symbol. (default: 3)
          `);
          process.exit(0);
        }
      >>>>>>> REPLACE
      <<<<<<< SEARCH
      :start_line: 72
      :end_line: 111
        } = {};
        const includePatterns: string[] = [];
        const ignorePatterns: string[] = [];

        for (let i = 0; i < args.length; i++) {
          const arg = args[i];
          if (!arg) {
            continue;
          }
          switch (arg) {
            case '--output':
              options.output = args[++i];
              break;
            case '--include':
              includePatterns.push(args[++i] as string);
              break;
            case '--ignore':
              ignorePatterns.push(args[++i] as string);
              break;
            case '--no-gitignore':
              options.noGitignore = true;
              break;
            case '--ranking-strategy':
              options.rankingStrategy = args[++i] as IRepoGraphOptions['rankingStrategy'];
              break;
            default:
              if (!arg.startsWith('-')) {
                options.root = arg;
              }
              break;
          }
        }

        if (includePatterns.length > 0) {
          options.include = includePatterns;
        }
        if (ignorePatterns.length > 0) {
          options.ignore = ignorePatterns;
        }
      =======
        } = {};
        const includePatterns: string[] = [];
        const ignorePatterns: string[] = [];
        // We need a mutable version of rendererOptions to build from CLI args
        const rendererOptions: {
          customHeader?: string;
          includeHeader?: boolean;
          includeOverview?: boolean;
          includeMermaidGraph?: boolean;
          includeFileList?: boolean;
          topFileCount?: number;
          includeSymbolDetails?: boolean;
          fileSectionSeparator?: string;
          symbolDetailOptions?: {
            includeRelations?: boolean;
            includeLineNumber?: boolean;
            includeCodeSnippet?: boolean;
            maxRelationsToShow?: number;
          };
        } = {};

        for (let i = 0; i < args.length; i++) {
          const arg = args[i];
          if (!arg) {
            continue;
          }
          switch (arg) {
            case '--output':
              options.output = args[++i];
              break;
            case '--include':
              includePatterns.push(args[++i] as string);
              break;
            case '--ignore':
              ignorePatterns.push(args[++i] as string);
              break;
            case '--no-gitignore':
              options.noGitignore = true;
              break;
            case '--ranking-strategy':
              options.rankingStrategy = args[++i] as IRepoGraphOptions['rankingStrategy'];
              break;
            // --- Renderer Options ---
            case '--no-header':
              rendererOptions.includeHeader = false;
              break;
            case '--no-overview':
              rendererOptions.includeOverview = false;
              break;
            case '--no-mermaid':
              rendererOptions.includeMermaidGraph = false;
              break;
            case '--no-file-list':
              rendererOptions.includeFileList = false;
              break;
            case '--no-symbol-details':
              rendererOptions.includeSymbolDetails = false;
              break;
            case '--top-file-count':
              rendererOptions.topFileCount = parseInt(args[++i] as string, 10);
              break;
            case '--file-section-separator':
              rendererOptions.fileSectionSeparator = args[++i];
              break;
            case '--no-symbol-relations':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeRelations: false };
              break;
            case '--no-symbol-line-numbers':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeLineNumber: false };
              break;
            case '--no-symbol-snippets':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeCodeSnippet: false };
              break;
            case '--max-relations-to-show':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), maxRelationsToShow: parseInt(args[++i] as string, 10) };
              break;
            default:
              if (!arg.startsWith('-')) {
                options.root = arg;
              }
              break;
          }
        }

        if (includePatterns.length > 0) {
          options.include = includePatterns;
        }
        if (ignorePatterns.length > 0) {
          options.ignore = ignorePatterns;
        }
        if (Object.keys(rendererOptions).length > 0) {
          options.rendererOptions = rendererOptions;
        }
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/pipeline/render.ts
    content: >-
      --- src/pipeline/render.ts

      +++ src/pipeline/render.ts

      @@ -32,38 +32,71 @@
        * @returns A Renderer function.
        */
       export const createMarkdownRenderer = (): Renderer => {
      -  return (rankedGraph: RankedCodeGraph, options: RendererOptions = {}) =>
      {

      +  return (rankedGraph: RankedCodeGraph, options: RendererOptions = {}) =>
      { // NOSONAR
           const { nodes, ranks } = rankedGraph;
           const {
             customHeader,
      -      includeMermaidGraph = true,

      +      includeHeader = true,

      +      includeOverview = true,

      +      includeMermaidGraph = true,

      +      includeFileList = true,

      +      topFileCount = 10,
             includeSymbolDetails = true,
      +      fileSectionSeparator = '---',

      +      symbolDetailOptions,
           } = options;
      +    

      +    const {

      +      includeRelations = true,

      +      includeLineNumber = true,

      +      includeCodeSnippet = true,

      +      maxRelationsToShow = 3,

      +    } = symbolDetailOptions || {};
       
           const fileNodes = [...nodes.values()].filter(attrs => attrs.type === 'file');
           const sortedFiles = fileNodes
             .sort((a, b) => getRank(b.id, ranks) - getRank(a.id, ranks));
       
      -    let md = customHeader ? `${customHeader}\n\n` : `# RepoGraph\n\n`;

      -    md += `_Generated by RepoGraph on ${new Date().toISOString()}_\n\n`;

      -    md += `## 🚀 Project Overview\n\n`;

      -    md += `This repository contains ${nodes.size} nodes
      (${sortedFiles.length} files).\n\n`;

      +    let md = '';

      +    if (customHeader) {

      +      md += `${customHeader}\n\n`;

      +    } else if (includeHeader) {

      +      md += `# RepoGraph\n\n`;

      +      md += `_Generated by RepoGraph on ${new
      Date().toISOString()}_\n\n`;

      +    }

      +

      +    if (includeOverview) {

      +      md += `## 🚀 Project Overview\n\n`;

      +      md += `This repository contains ${nodes.size} nodes
      (${sortedFiles.length} files).\n\n`;

      +    }
       
           if (includeMermaidGraph) {
             md += `### Module Dependency Graph\n\n`;
             md += generateMermaidGraph(rankedGraph);
           }
           
      -    md += `### Top 10 Most Important Files\n\n`;

      -    md += `| Rank | File | Description |\n`;

      -    md += `| :--- | :--- | :--- |\n`;

      -    sortedFiles.slice(0, 10).forEach((file, i) => {

      -      md += `| ${i + 1} | \`${file.filePath}\` | Key module in the
      architecture. |\n`;

      -    });

      -    md += `\n---\n\n`;

      +    if (includeFileList && sortedFiles.length > 0) {

      +      md += `### Top ${topFileCount} Most Important Files\n\n`;

      +      md += `| Rank | File | Description |\n`;

      +      md += `| :--- | :--- | :--- |\n`;

      +      sortedFiles.slice(0, topFileCount).forEach((file, i) => {

      +        md += `| ${i + 1} | \`${file.filePath}\` | Key module in the
      architecture. |\n`;

      +      });

      +      md += `\n${fileSectionSeparator}\n\n`;

      +    }
       
           if (includeSymbolDetails) {
             md += `## 📂 File & Symbol Breakdown\n\n`;
      @@ -75,26 +108,34 @@
       
               if (symbolNodes.length > 0) {
                 for (const symbol of symbolNodes) {
      -            const outgoingEdges = rankedGraph.edges.filter(e => e.fromId
      === symbol.id);            

      -            let relations = '';

      -            if (outgoingEdges.length > 0) {

      -              const edgeGroups = outgoingEdges.reduce((acc, edge) => {

      -                (acc[edge.type] = acc[edge.type] || []).push(edge);

      -                return acc;

      -              }, {} as Record<CodeEdge['type'], CodeEdge[]>);

      -              

      -              const relationParts = [

      -                buildRelationString('inherits', edgeGroups.inherits ||
      [], nodes),

      -                buildRelationString('implements', edgeGroups.implements
      || [], nodes),

      -                buildRelationString('calls', edgeGroups.calls || [],
      nodes, 3),

      -              ].filter((s): s is string => s !== null);

      -              if(relationParts.length > 0) relations = `
      (${relationParts.join('; ')})`;

      +            const detailParts: string[] = [];

      +            if (includeRelations) {

      +              const outgoingEdges = rankedGraph.edges.filter(e =>
      e.fromId === symbol.id);

      +              if (outgoingEdges.length > 0) {

      +                const edgeGroups = outgoingEdges.reduce((acc, edge) => {

      +                  (acc[edge.type] = acc[edge.type] || []).push(edge);

      +                  return acc;

      +                }, {} as Record<CodeEdge['type'], CodeEdge[]>);

      +                

      +                const relationParts = [

      +                  buildRelationString('inherits', edgeGroups.inherits ||
      [], nodes),

      +                  buildRelationString('implements', edgeGroups.implements
      || [], nodes),

      +                  buildRelationString('calls', edgeGroups.calls || [],
      nodes, maxRelationsToShow),

      +                ].filter((s): s is string => s !== null);

      +                if (relationParts.length > 0)
      detailParts.push(`(${relationParts.join('; ')})`);

      +              }
                   }
      -            md += `- **\`${symbol.type} ${symbol.name}\`**${relations} -
      _L${symbol.startLine}_\n`;

      -            if (symbol.codeSnippet) {

      +            if (includeLineNumber) {

      +              detailParts.push(`- _L${symbol.startLine}_`);

      +            }

      +

      +            md += `- **\`${symbol.type}
      ${symbol.name}\`**${detailParts.length > 0 ? ` ${detailParts.join(' ')}` :
      ''}\n`;

      +            

      +            if (includeCodeSnippet && symbol.codeSnippet) {
                     // Use language from file extension for syntax highlighting if possible
                     const lang = fileNode.language || fileNode.filePath.split('.').pop() || '';
                     md += `  \`\`\`${lang}\n  ${symbol.codeSnippet}\n  \`\`\`\n`;
                   }
      @@ -103,7 +144,7 @@
               } else {
                   md += `_No symbols identified in this file._\n`
               }
      -        md += `\n---\n\n`;

      +        md += `\n${fileSectionSeparator}\n\n`;
             }
           }
    patchStrategy: new-unified
  - type: write
    path: src/types.ts
    content: >-
      --- src/types.ts

      +++ src/types.ts

      @@ -53,13 +53,37 @@
       
       /** Configuration for the final Markdown output. */
       export type RendererOptions = {
      +  /** Custom text to appear at the top of the Markdown file. Overrides
      `includeHeader`. */

      +  readonly customHeader?: string;

      +  /** Include the default `RepoGraph` header. @default true */

      +  readonly includeHeader?: boolean;

      +  /** Include the project overview section. @default true */

      +  readonly includeOverview?: boolean;
         /** Include a Mermaid.js dependency graph. @default true */
         readonly includeMermaidGraph?: boolean;
      +  /** Include the list of top-ranked files. @default true */

      +  readonly includeFileList?: boolean;

      +  /** Number of files to show in the top list. @default 10 */

      +  readonly topFileCount?: number;
         /** Include detailed breakdowns for each symbol. @default true */
         readonly includeSymbolDetails?: boolean;
      -  /** Custom text to appear at the top of the Markdown file. */

      -  readonly customHeader?: string;

      +  /** String to use as a separator between file sections. @default '---'
      */

      +  readonly fileSectionSeparator?: string;

      +

      +  /** Options for how individual symbols are rendered */

      +  readonly symbolDetailOptions?: {

      +    /** Include relationships (calls, inherits, etc.) in the symbol line.
      @default true */

      +    readonly includeRelations?: boolean;

      +    /** Include the starting line number. @default true */

      +    readonly includeLineNumber?: boolean;

      +    /** Include the code snippet for the symbol. @default true */

      +    readonly includeCodeSnippet?: boolean;

      +    /** Max number of relations to show per type (e.g., 'calls').
      @default 3 */

      +    readonly maxRelationsToShow?: number;

      +  };
       };
       
       /** Configuration options for the main `generateMap` function. */
    patchStrategy: new-unified
snapshot:
  src/index.ts: |-
    #!/usr/bin/env bun

    // High-Level API for simple use cases
    import { generateMap as executeGenerateMap } from './high-level.js';
    import type { RepoGraphOptions as IRepoGraphOptions } from './types.js';

    export { generateMap } from './high-level.js';

    // Low-Level API for composition and advanced use cases
    export { createMapGenerator } from './composer.js';

    // Default pipeline component factories
    export { createDefaultDiscoverer } from './pipeline/discover.js';
    export { createTreeSitterAnalyzer } from './pipeline/analyze.js';
    export { createPageRanker, createGitRanker } from './pipeline/rank.js';
    export { createMarkdownRenderer } from './pipeline/render.js';

    // Core types for building custom components
    export type {
      FileContent,
      CodeNode,
      CodeNodeType,
      CodeEdge,
      CodeGraph,
      RankedCodeGraph,
      RepoGraphOptions,
      RendererOptions,
      FileDiscoverer,
      Analyzer,
      Ranker,
      Renderer,
    } from './types.js';

    // This section runs only when the script is executed directly from the CLI
    import { fileURLToPath } from 'node:url';
    import path from 'node:path';

    const isRunningDirectly = () => {
      if (typeof process.argv[1] === 'undefined') return false;
      const runningFile = path.resolve(process.argv[1]);
      const currentFile = fileURLToPath(import.meta.url);
      return runningFile === currentFile;
    };

    if (isRunningDirectly()) {
      const args = process.argv.slice(2);

      if (args.includes('--help') || args.includes('-h')) {
        console.log(`
    Usage: repograph [root] [options]

    Arguments:
      root                     The root directory of the repository to analyze. Defaults to the current working directory.

    Options:
      -h, --help               Display this help message.
      -v, --version            Display the version number.
      --output <path>          Path to the output Markdown file. (default: "repograph.md")
      --include <pattern>      Glob pattern for files to include. Can be specified multiple times.
      --ignore <pattern>       Glob pattern for files to ignore. Can be specified multiple times.
      --no-gitignore           Do not respect .gitignore files.
      --ranking-strategy <name> The ranking strategy to use. (default: "pagerank", options: "pagerank", "git-changes")
        `);
        process.exit(0);
      }

      if (args.includes('--version') || args.includes('-v')) {
        // In a real app, you'd get this from package.json
        console.log('0.1.0');
        process.exit(0);
      }

      // We need a mutable version of the options to build it from arguments.
      const options: {
        root?: string;
        output?: string;
        include?: readonly string[];
        ignore?: readonly string[];
        noGitignore?: boolean;
        rankingStrategy?: 'pagerank' | 'git-changes';
        rendererOptions?: IRepoGraphOptions['rendererOptions'];
      } = {};
      const includePatterns: string[] = [];
      const ignorePatterns: string[] = [];

      for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (!arg) {
          continue;
        }
        switch (arg) {
          case '--output':
            options.output = args[++i];
            break;
          case '--include':
            includePatterns.push(args[++i] as string);
            break;
          case '--ignore':
            ignorePatterns.push(args[++i] as string);
            break;
          case '--no-gitignore':
            options.noGitignore = true;
            break;
          case '--ranking-strategy':
            options.rankingStrategy = args[++i] as IRepoGraphOptions['rankingStrategy'];
            break;
          default:
            if (!arg.startsWith('-')) {
              options.root = arg;
            }
            break;
        }
      }

      if (includePatterns.length > 0) {
        options.include = includePatterns;
      }
      if (ignorePatterns.length > 0) {
        options.ignore = ignorePatterns;
      }

      executeGenerateMap(options)
        .then(() => {
          console.log(`✅ RepoGraph map generated successfully at ${path.resolve(options.root || process.cwd(), options.output || 'repograph.md')}`);
        })
        .catch((error: unknown) => {
          if (error instanceof Error) {
            console.error(`❌ Error generating RepoGraph map: ${error.message}`);
          } else {
            console.error('❌ An unknown error occurred while generating the RepoGraph map.');
          }
          process.exit(1);
        });
    }
  src/pipeline/render.ts: >-
    import type { Renderer, RankedCodeGraph, RendererOptions, CodeEdge, CodeNode
    } from '../types.js';


    const generateMermaidGraph = (rankedGraph: RankedCodeGraph): string => {
      const fileNodes = [...rankedGraph.nodes.values()].filter(node => node.type === 'file');
      if (fileNodes.length === 0) return '';

      let mermaidString = '```mermaid\n';
      mermaidString += 'graph TD\n';
      
      const edges = new Set<string>();
      for (const edge of rankedGraph.edges) {
          const sourceNode = rankedGraph.nodes.get(edge.fromId);
          const targetNode = rankedGraph.nodes.get(edge.toId);

          if(sourceNode?.type === 'file' && targetNode?.type === 'file' && edge.type === 'imports'){
            const edgeStr = `    ${edge.fromId}["${sourceNode.name}"] --> ${edge.toId}["${targetNode.name}"]`;
            if(!edges.has(edgeStr)) {
                edges.add(edgeStr);
            }
          }
      }

      mermaidString += Array.from(edges).join('\n');
      mermaidString += '\n```\n';
      return mermaidString;
    };


    const getRank = (id: string, ranks: ReadonlyMap<string, number>): number =>
    ranks.get(id) || 0;


    const buildRelationString = (
      label: string,
      edges: readonly CodeEdge[],
      allNodes: ReadonlyMap<string, CodeNode>,
      limit?: number
    ): string | null => {
      const names = edges.map(e => `\`${allNodes.get(e.toId)?.name ?? 'unknown'}\``);
      if (names.length === 0) return null;
      
      let displayNames = names;
      let suffix = '';
      if (limit && names.length > limit) {
          displayNames = names.slice(0, limit);
          suffix = '...';
      }
      
      return `${label} ${displayNames.join(', ')}${suffix}`;
    };


    /**
     * Creates the default Markdown renderer. It generates a summary, an optional
     * Mermaid diagram, and a detailed breakdown of files and symbols.
     * @returns A Renderer function.
     */
    export const createMarkdownRenderer = (): Renderer => {
      return (rankedGraph: RankedCodeGraph, options: RendererOptions = {}) => {
        const { nodes, ranks } = rankedGraph;
        const {
          customHeader,
          includeMermaidGraph = true,
          includeSymbolDetails = true,
        } = options;

        const fileNodes = [...nodes.values()].filter(attrs => attrs.type === 'file');
        const sortedFiles = fileNodes
          .sort((a, b) => getRank(b.id, ranks) - getRank(a.id, ranks));

        let md = customHeader ? `${customHeader}\n\n` : `# RepoGraph\n\n`;
        md += `_Generated by RepoGraph on ${new Date().toISOString()}_\n\n`;
        md += `## 🚀 Project Overview\n\n`;
        md += `This repository contains ${nodes.size} nodes (${sortedFiles.length} files).\n\n`;

        if (includeMermaidGraph) {
          md += `### Module Dependency Graph\n\n`;
          md += generateMermaidGraph(rankedGraph);
        }
        
        md += `### Top 10 Most Important Files\n\n`;
        md += `| Rank | File | Description |\n`;
        md += `| :--- | :--- | :--- |\n`;
        sortedFiles.slice(0, 10).forEach((file, i) => {
          md += `| ${i + 1} | \`${file.filePath}\` | Key module in the architecture. |\n`;
        });
        md += `\n---\n\n`;

        if (includeSymbolDetails) {
          md += `## 📂 File & Symbol Breakdown\n\n`;
          for (const fileNode of sortedFiles) {
            md += `### [\`${fileNode.filePath}\`](./${fileNode.filePath})\n\n`;
            
            const symbolNodes = [...nodes.values()]
              .filter(node => node.filePath === fileNode.filePath && node.type !== 'file')
              .sort((a, b) => a.startLine - b.startLine);

            if (symbolNodes.length > 0) {
              for (const symbol of symbolNodes) {
                const outgoingEdges = rankedGraph.edges.filter(e => e.fromId === symbol.id);            
                let relations = '';
                if (outgoingEdges.length > 0) {
                  const edgeGroups = outgoingEdges.reduce((acc, edge) => {
                    (acc[edge.type] = acc[edge.type] || []).push(edge);
                    return acc;
                  }, {} as Record<CodeEdge['type'], CodeEdge[]>);
                  
                  const relationParts = [
                    buildRelationString('inherits', edgeGroups.inherits || [], nodes),
                    buildRelationString('implements', edgeGroups.implements || [], nodes),
                    buildRelationString('calls', edgeGroups.calls || [], nodes, 3),
                  ].filter((s): s is string => s !== null);
                  if(relationParts.length > 0) relations = ` (${relationParts.join('; ')})`;
                }
                md += `- **\`${symbol.type} ${symbol.name}\`**${relations} - _L${symbol.startLine}_\n`;
                if (symbol.codeSnippet) {
                  // Use language from file extension for syntax highlighting if possible
                  const lang = fileNode.language || fileNode.filePath.split('.').pop() || '';
                  md += `  \`\`\`${lang}\n  ${symbol.codeSnippet}\n  \`\`\`\n`;
                }
              }
            } else {
                md += `_No symbols identified in this file._\n`
            }
            md += `\n---\n\n`;
          }
        }

        return md;
      };
    };
  src/types.ts: >-
    // Core Data Structures


    /** Represents a single file read from disk. Immutable. */

    export type FileContent = {
      readonly path: string;
      readonly content: string;
    };


    /** The type of a symbol identified in the code. */

    export type CodeNodeType =
      | 'file'
      | 'class'
      | 'function'
      | 'interface'
      | 'variable'
      | 'type'
      | 'arrow_function'
      | 'method'
      | 'field'
      | 'struct'
      | 'enum'
      | 'namespace'
      | 'trait'
      | 'impl'
      | 'constructor'
      | 'property'
      | 'constant'
      | 'static'
      | 'union'
      | 'template';

    /** Represents a single, identifiable symbol (or a file) in the code.
    Immutable. */

    export type CodeNode = {
      readonly id: string; // Unique identifier (e.g., 'src/api.ts#MyClass')
      readonly type: CodeNodeType;
      readonly name: string; // e.g., 'MyClass'
      readonly filePath: string;
      readonly startLine: number;
      readonly endLine: number;
      readonly language?: string; // For file nodes, the detected language
      readonly codeSnippet?: string; // e.g., function signature
    };


    /** Represents a directed relationship between two CodeNodes. Immutable. */

    export type CodeEdge = {
      readonly fromId: string; // ID of the source CodeNode
      readonly toId: string;   // ID of the target CodeNode
      readonly type: 'imports' | 'calls' | 'inherits' | 'implements';
    };


    /** The complete, raw model of the repository's structure. Immutable. */

    export type CodeGraph = {
      readonly nodes: ReadonlyMap<string, CodeNode>;
      readonly edges: readonly CodeEdge[];
    };


    /** A CodeGraph with an added 'rank' score for each node. Immutable. */

    export type RankedCodeGraph = CodeGraph & {
      readonly ranks: ReadonlyMap<string, number>; // Key is CodeNode ID
    };


    // High-Level API Options


    /** Configuration for the final Markdown output. */

    export type RendererOptions = {
      /** Include a Mermaid.js dependency graph. @default true */
      readonly includeMermaidGraph?: boolean;
      /** Include detailed breakdowns for each symbol. @default true */
      readonly includeSymbolDetails?: boolean;
      /** Custom text to appear at the top of the Markdown file. */
      readonly customHeader?: string;
    };


    /** Configuration options for the main `generateMap` function. */

    export type RepoGraphOptions = {
      /** Root directory to analyze. @default process.cwd() */
      readonly root?: string;
      /** Output path for the Markdown file. @default './repograph.md' */
      readonly output?: string;
      /** Glob patterns for files to include. */
      readonly include?: readonly string[];
      /** Glob patterns for files to exclude. */
      readonly ignore?: readonly string[];
      /** Disables the use of .gitignore. @default false */
      readonly noGitignore?: boolean;
      /** The ranking strategy to use. @default 'pagerank' */
      readonly rankingStrategy?: 'pagerank' | 'git-changes';
      /** Configuration for the final Markdown output. */
      readonly rendererOptions?: RendererOptions;
    };


    // Low-Level Functional Pipeline Contracts


    /** Discovers files and returns their content. */

    export type FileDiscoverer = (config: {
      readonly root: string;
      readonly include?: readonly string[];
      readonly ignore?: readonly string[];
      readonly noGitignore?: boolean;
    }) => Promise<readonly FileContent[]>;


    /** Analyzes file content and builds the dependency graph. */

    export type Analyzer = (files: readonly FileContent[]) =>
    Promise<CodeGraph>;


    /** Ranks the nodes in a graph. */

    export type Ranker = (graph: CodeGraph) => Promise<RankedCodeGraph>;


    /** Renders a ranked graph into a string format. */

    export type Renderer = (rankedGraph: RankedCodeGraph, options?:
    RendererOptions) => string;
approved: true
