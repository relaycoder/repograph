uuid: bcc9ffb2-f41e-42c2-b349-2e008d533488
projectId: repograph
createdAt: '2025-07-17T22:39:49.559Z'
linesAdded: 22
linesRemoved: 11
gitCommitMsg: 'feat(api): allow createMapGenerator to return data object'
promptSummary: >-
  The user wants to enhance the low-level programmatic API to provide more
  control over the output. This includes allowing users to receive the analysis
  result as a data object and the rendered output as a string, rather than only
  writing directly to a file. I have provided the code changes without the
  README modifications as requested.
reasoning:
  - >-
    Of course. Here are the correct patches for the low-level API update,
    excluding the changes to `README.md`.
  - >-
    I'll start by updating `src/types.ts` to define the new `RepoGraphMap` type.
    This type will represent the structured output from the map generator,
    containing both the ranked graph and the rendered Markdown.
  - >-
    Next, I will modify the core `createMapGenerator` in `src/composer.ts`. This
    change updates its signature to return a `Promise<RepoGraphMap>` and makes
    the `output` file path optional. If an `output` path is provided, the file
    is written as a side-effect; otherwise, the function simply returns the data
    object. The logging is also adjusted to reflect that file-writing is no
    longer a numbered step in the core pipeline.
  - >-
    Finally, to make the new type available to library consumers, I'll export
    `RepoGraphMap` from the main entry point, `src/index.ts`.
operations:
  - type: write
    path: src/types.ts
    content: >-
      --- src/types.ts

      +++ src/types.ts

      @@ -48,6 +48,12 @@
         readonly ranks: ReadonlyMap<string, number>; // Key is CodeNode ID
       };
       
      +/** The output of a map generation process, containing the graph and
      rendered output. */

      +export type RepoGraphMap = {

      +  readonly graph: RankedCodeGraph;

      +  readonly markdown: string;

      +};

      +
       // High-Level API Options
       
       /** Configuration for the final Markdown output. */
    patchStrategy: new-unified
  - type: write
    path: src/composer.ts
    content: >-
      <<<<<<< SEARCH

      import path from 'node:path';

      import type { Analyzer, FileDiscoverer, Ranker, Renderer } from
      './types.js';

      import { logger } from './utils/logger.util.js';

      import { writeFile } from './utils/fs.util.js';


      type MapGenerator = (config: {
        readonly root: string;
        readonly output: string;
        readonly include?: readonly string[];
        readonly ignore?: readonly string[];
        readonly noGitignore?: boolean;
        readonly rendererOptions?: any;
      }) => Promise<void>;

      =======

      import path from 'node:path';

      import type { Analyzer, FileDiscoverer, Ranker, Renderer, RepoGraphMap }
      from './types.js';

      import { logger } from './utils/logger.util.js';

      import { writeFile } from './utils/fs.util.js';


      type MapGenerator = (config: {
        readonly root: string;
        readonly output?: string;
        readonly include?: readonly string[];
        readonly ignore?: readonly string[];
        readonly noGitignore?: boolean;
        readonly rendererOptions?: any;
      }) => Promise<RepoGraphMap>;

      >>>>>>> REPLACE

      <<<<<<< SEARCH
        return async (config) => {
          const { root, output, include, ignore, noGitignore, rendererOptions } = config;

          logger.info('1/5 Discovering files...');
          const files = await pipeline.discover({ root, include, ignore, noGitignore });
          logger.info(`  -> Found ${files.length} files to analyze.`);

          logger.info('2/5 Analyzing code and building graph...');
          const graph = await pipeline.analyze(files);
          logger.info(`  -> Built graph with ${graph.nodes.size} nodes and ${graph.edges.length} edges.`);

          logger.info('3/5 Ranking graph nodes...');
          const rankedGraph = await pipeline.rank(graph);
          logger.info('  -> Ranking complete.');

          logger.info('4/5 Rendering output...');
          const markdown = pipeline.render(rankedGraph, rendererOptions);
          logger.info('  -> Rendering complete.');

          const outputPath = path.isAbsolute(output) ? output : path.resolve(root, output);
          logger.info(`5/5 Writing report to ${path.relative(process.cwd(), outputPath)}...`);
          await writeFile(outputPath, markdown);
          logger.info('  -> Report saved.');
        };
      =======
        return async (config) => {
          const { root, output, include, ignore, noGitignore, rendererOptions } = config;

          logger.info('1/4 Discovering files...');
          const files = await pipeline.discover({ root, include, ignore, noGitignore });
          logger.info(`  -> Found ${files.length} files to analyze.`);

          logger.info('2/4 Analyzing code and building graph...');
          const graph = await pipeline.analyze(files);
          logger.info(`  -> Built graph with ${graph.nodes.size} nodes and ${graph.edges.length} edges.`);

          logger.info('3/4 Ranking graph nodes...');
          const rankedGraph = await pipeline.rank(graph);
          logger.info('  -> Ranking complete.');

          logger.info('4/4 Rendering output...');
          const markdown = pipeline.render(rankedGraph, rendererOptions);
          logger.info('  -> Rendering complete.');

          if (output) {
            const outputPath = path.isAbsolute(output) ? output : path.resolve(root, output);
            logger.info(`Writing report to ${path.relative(process.cwd(), outputPath)}...`);
            await writeFile(outputPath, markdown);
            logger.info('  -> Report saved.');
          }

          return { graph: rankedGraph, markdown };
        };
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/index.ts
    content: |-
      --- src/index.ts
      +++ src/index.ts
      @@ -19,6 +19,7 @@
         CodeEdge,
         CodeGraph,
         RankedCodeGraph,
      +  RepoGraphMap,
         RepoGraphOptions,
         RendererOptions,
         FileDiscoverer,
    patchStrategy: new-unified
snapshot:
  src/types.ts: >-
    // Core Data Structures


    /** Represents a single file read from disk. Immutable. */

    export type FileContent = {
      readonly path: string;
      readonly content: string;
    };


    /** The type of a symbol identified in the code. */

    export type CodeNodeType =
      | 'file'
      | 'class'
      | 'function'
      | 'interface'
      | 'variable'
      | 'type'
      | 'arrow_function'
      | 'method'
      | 'field'
      | 'struct'
      | 'enum'
      | 'namespace'
      | 'trait'
      | 'impl'
      | 'constructor'
      | 'property'
      | 'constant'
      | 'static'
      | 'union'
      | 'template';

    /** Represents a single, identifiable symbol (or a file) in the code.
    Immutable. */

    export type CodeNode = {
      readonly id: string; // Unique identifier (e.g., 'src/api.ts#MyClass')
      readonly type: CodeNodeType;
      readonly name: string; // e.g., 'MyClass'
      readonly filePath: string;
      readonly startLine: number;
      readonly endLine: number;
      readonly language?: string; // For file nodes, the detected language
      readonly codeSnippet?: string; // e.g., function signature
    };


    /** Represents a directed relationship between two CodeNodes. Immutable. */

    export type CodeEdge = {
      readonly fromId: string; // ID of the source CodeNode
      readonly toId: string;   // ID of the target CodeNode
      readonly type: 'imports' | 'calls' | 'inherits' | 'implements';
    };


    /** The complete, raw model of the repository's structure. Immutable. */

    export type CodeGraph = {
      readonly nodes: ReadonlyMap<string, CodeNode>;
      readonly edges: readonly CodeEdge[];
    };


    /** A CodeGraph with an added 'rank' score for each node. Immutable. */

    export type RankedCodeGraph = CodeGraph & {
      readonly ranks: ReadonlyMap<string, number>; // Key is CodeNode ID
    };


    // High-Level API Options


    /** Configuration for the final Markdown output. */

    export type RendererOptions = {
      /** Custom text to appear at the top of the Markdown file. Overrides `includeHeader`. */
      readonly customHeader?: string;
      /** Include the default `RepoGraph` header. @default true */
      readonly includeHeader?: boolean;
      /** Include the project overview section. @default true */
      readonly includeOverview?: boolean;
      /** Include a Mermaid.js dependency graph. @default true */
      readonly includeMermaidGraph?: boolean;
      /** Include the list of top-ranked files. @default true */
      readonly includeFileList?: boolean;
      /** Number of files to show in the top list. @default 10 */
      readonly topFileCount?: number;
      /** Include detailed breakdowns for each symbol. @default true */
      readonly includeSymbolDetails?: boolean;
      /** String to use as a separator between file sections. @default '---' */
      readonly fileSectionSeparator?: string;

      /** Options for how individual symbols are rendered */
      readonly symbolDetailOptions?: {
        /** Include relationships (calls, inherits, etc.) in the symbol line. @default true */
        readonly includeRelations?: boolean;
        /** Include the starting line number. @default true */
        readonly includeLineNumber?: boolean;
        /** Include the code snippet for the symbol. @default true */
        readonly includeCodeSnippet?: boolean;
        /** Max number of relations to show per type (e.g., 'calls'). @default 3 */
        readonly maxRelationsToShow?: number;
      };
    };


    /** Configuration options for the main `generateMap` function. */

    export type RepoGraphOptions = {
      /** Root directory to analyze. @default process.cwd() */
      readonly root?: string;
      /** Output path for the Markdown file. @default './repograph.md' */
      readonly output?: string;
      /** Glob patterns for files to include. */
      readonly include?: readonly string[];
      /** Glob patterns for files to exclude. */
      readonly ignore?: readonly string[];
      /** Disables the use of .gitignore. @default false */
      readonly noGitignore?: boolean;
      /** The ranking strategy to use. @default 'pagerank' */
      readonly rankingStrategy?: 'pagerank' | 'git-changes';
      /** Configuration for the final Markdown output. */
      readonly rendererOptions?: RendererOptions;
      /** Logging level. @default 'info' */
      readonly logLevel?: 'silent' | 'error' | 'warn' | 'info' | 'debug';
    };


    // Low-Level Functional Pipeline Contracts


    /** Discovers files and returns their content. */

    export type FileDiscoverer = (config: {
      readonly root: string;
      readonly include?: readonly string[];
      readonly ignore?: readonly string[];
      readonly noGitignore?: boolean;
    }) => Promise<readonly FileContent[]>;


    /** Analyzes file content and builds the dependency graph. */

    export type Analyzer = (files: readonly FileContent[]) =>
    Promise<CodeGraph>;


    /** Ranks the nodes in a graph. */

    export type Ranker = (graph: CodeGraph) => Promise<RankedCodeGraph>;


    /** Renders a ranked graph into a string format. */

    export type Renderer = (rankedGraph: RankedCodeGraph, options?:
    RendererOptions) => string;
  src/composer.ts: >-
    import path from 'node:path';

    import type { Analyzer, FileDiscoverer, Ranker, Renderer } from
    './types.js';

    import { logger } from './utils/logger.util.js';

    import { writeFile } from './utils/fs.util.js';


    type MapGenerator = (config: {
      readonly root: string;
      readonly output: string;
      readonly include?: readonly string[];
      readonly ignore?: readonly string[];
      readonly noGitignore?: boolean;
      readonly rendererOptions?: any;
    }) => Promise<void>;


    /**
     * A Higher-Order Function that takes pipeline functions as arguments and
     * returns a fully configured `generate` function for creating a codemap.
     * This is the core of RepoGraph's composability.
     *
     * @param pipeline An object containing implementations for each pipeline stage.
     * @returns An asynchronous function to generate and write the codemap.
     */
    export const createMapGenerator = (pipeline: {
      readonly discover: FileDiscoverer;
      readonly analyze: Analyzer;
      readonly rank: Ranker;
      readonly render: Renderer;
    }): MapGenerator => {
      if (
        !pipeline ||
        typeof pipeline.discover !== 'function' ||
        typeof pipeline.analyze !== 'function' ||
        typeof pipeline.rank !== 'function' ||
        typeof pipeline.render !== 'function'
      ) {
        throw new Error('createMapGenerator: A valid pipeline object with discover, analyze, rank, and render functions must be provided.');
      }

      return async (config) => {
        const { root, output, include, ignore, noGitignore, rendererOptions } = config;

        logger.info('1/5 Discovering files...');
        const files = await pipeline.discover({ root, include, ignore, noGitignore });
        logger.info(`  -> Found ${files.length} files to analyze.`);

        logger.info('2/5 Analyzing code and building graph...');
        const graph = await pipeline.analyze(files);
        logger.info(`  -> Built graph with ${graph.nodes.size} nodes and ${graph.edges.length} edges.`);

        logger.info('3/5 Ranking graph nodes...');
        const rankedGraph = await pipeline.rank(graph);
        logger.info('  -> Ranking complete.');

        logger.info('4/5 Rendering output...');
        const markdown = pipeline.render(rankedGraph, rendererOptions);
        logger.info('  -> Rendering complete.');

        const outputPath = path.isAbsolute(output) ? output : path.resolve(root, output);
        logger.info(`5/5 Writing report to ${path.relative(process.cwd(), outputPath)}...`);
        await writeFile(outputPath, markdown);
        logger.info('  -> Report saved.');
      };
    };
  src/index.ts: |-
    #!/usr/bin/env bun

    import { logger } from './utils/logger.util.js';
    import { RepoGraphError } from './utils/error.util.js';
    // High-Level API for simple use cases
    import { generateMap as executeGenerateMap } from './high-level.js';
    import type { RepoGraphOptions as IRepoGraphOptions } from './types.js';

    export { generateMap } from './high-level.js';

    // Low-Level API for composition and advanced use cases
    export { createMapGenerator } from './composer.js';

    // Default pipeline component factories
    export { createDefaultDiscoverer } from './pipeline/discover.js';
    export { createTreeSitterAnalyzer } from './pipeline/analyze.js';
    export { createPageRanker, createGitRanker } from './pipeline/rank.js';
    export { createMarkdownRenderer } from './pipeline/render.js';

    // Core types for building custom components
    export type {
      FileContent,
      CodeNode,
      CodeNodeType,
      CodeEdge,
      CodeGraph,
      RankedCodeGraph,
      RepoGraphOptions,
      RendererOptions,
      FileDiscoverer,
      Analyzer,
      Ranker,
      Renderer,
    } from './types.js';

    // This section runs only when the script is executed directly from the CLI
    import { fileURLToPath } from 'node:url';
    import path from 'node:path';

    const isRunningDirectly = () => {
      if (typeof process.argv[1] === 'undefined') return false;
      const runningFile = path.resolve(process.argv[1]);
      const currentFile = fileURLToPath(import.meta.url);
      return runningFile === currentFile;
    };

    if (isRunningDirectly()) {
      const args = process.argv.slice(2);

      if (args.includes('--help') || args.includes('-h')) {
        console.log(`
    Usage: repograph [root] [options]

    Arguments:
      root                     The root directory of the repository to analyze. Defaults to the current working directory.

    Options:
      -h, --help               Display this help message.
      -v, --version            Display the version number.
      --output <path>          Path to the output Markdown file. (default: "repograph.md")
      --include <pattern>      Glob pattern for files to include. Can be specified multiple times.
      --ignore <pattern>       Glob pattern for files to ignore. Can be specified multiple times.
      --no-gitignore           Do not respect .gitignore files.
      --ranking-strategy <name> The ranking strategy to use. (default: "pagerank", options: "pagerank", "git-changes")
      --log-level <level>      Set the logging level. (default: "info", options: "silent", "error", "warn", "info", "debug")

    Output Formatting:
      --no-header              Do not include the main "RepoGraph" header.
      --no-overview            Do not include the project overview section.
      --no-mermaid             Do not include the Mermaid dependency graph.
      --no-file-list           Do not include the list of top-ranked files.
      --no-symbol-details      Do not include the detailed file and symbol breakdown.
      --top-file-count <num>   Set the number of files in the top list. (default: 10)
      --file-section-separator <str> Custom separator for file sections. (default: "---")
      --no-symbol-relations    Hide symbol relationship details (e.g., calls, implements).
      --no-symbol-line-numbers Hide line numbers for symbols.
      --no-symbol-snippets     Hide code snippets for symbols.
      --max-relations-to-show <num> Max number of 'calls' relations to show per symbol. (default: 3)
        `);
        process.exit(0);
      }

      if (args.includes('--version') || args.includes('-v')) {
        // In a real app, you'd get this from package.json
        logger.info('0.1.0');
        process.exit(0);
      }

      // We need a mutable version of the options to build it from arguments.
      const options: {
        root?: string;
        output?: string;
        include?: readonly string[];
        ignore?: readonly string[];
        noGitignore?: boolean;
        rankingStrategy?: 'pagerank' | 'git-changes';
        logLevel?: IRepoGraphOptions['logLevel'];
        rendererOptions?: IRepoGraphOptions['rendererOptions'];
      } = {};
      const includePatterns: string[] = [];
      const ignorePatterns: string[] = [];
      // We need a mutable version of rendererOptions to build from CLI args
      const rendererOptions: {
        customHeader?: string;
        includeHeader?: boolean;
        includeOverview?: boolean;
        includeMermaidGraph?: boolean;
        includeFileList?: boolean;
        topFileCount?: number;
        includeSymbolDetails?: boolean;
        fileSectionSeparator?: string;
        symbolDetailOptions?: {
          includeRelations?: boolean;
          includeLineNumber?: boolean;
          includeCodeSnippet?: boolean;
          maxRelationsToShow?: number;
        };
      } = {};

      for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (!arg) {
          continue;
        }
        switch (arg) {
          case '--output':
            options.output = args[++i];
            break;
          case '--include':
            includePatterns.push(args[++i] as string);
            break;
          case '--ignore':
            ignorePatterns.push(args[++i] as string);
            break;
          case '--no-gitignore':
            options.noGitignore = true;
            break;
          case '--ranking-strategy':
            options.rankingStrategy = args[++i] as IRepoGraphOptions['rankingStrategy'];
            break;
          case '--log-level':
            options.logLevel = args[++i] as IRepoGraphOptions['logLevel'];
            break;
          // --- Renderer Options ---
          case '--no-header':
            rendererOptions.includeHeader = false;
            break;
          case '--no-overview':
            rendererOptions.includeOverview = false;
            break;
          case '--no-mermaid':
            rendererOptions.includeMermaidGraph = false;
            break;
          case '--no-file-list':
            rendererOptions.includeFileList = false;
            break;
          case '--no-symbol-details':
            rendererOptions.includeSymbolDetails = false;
            break;
          case '--top-file-count':
            rendererOptions.topFileCount = parseInt(args[++i] as string, 10);
            break;
          case '--file-section-separator':
            rendererOptions.fileSectionSeparator = args[++i];
            break;
          case '--no-symbol-relations':
            rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeRelations: false };
            break;
          case '--no-symbol-line-numbers':
            rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeLineNumber: false };
            break;
          case '--no-symbol-snippets':
            rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeCodeSnippet: false };
            break;
          case '--max-relations-to-show':
            rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), maxRelationsToShow: parseInt(args[++i] as string, 10) };
            break;
          default:
            if (!arg.startsWith('-')) {
              options.root = arg;
            }
            break;
        }
      }

      if (includePatterns.length > 0) {
        options.include = includePatterns;
      }
      if (ignorePatterns.length > 0) {
        options.ignore = ignorePatterns;
      }
      if (Object.keys(rendererOptions).length > 0) {
        options.rendererOptions = rendererOptions;
      }

      const finalOutput = path.resolve(options.root || process.cwd(), options.output || 'repograph.md');

      logger.info(`Starting RepoGraph analysis for "${path.resolve(options.root || process.cwd())}"...`);
      executeGenerateMap(options)
        .then(() => {
          const relativePath = path.relative(process.cwd(), finalOutput);
          logger.info(`\n✅ Success! RepoGraph map saved to ${relativePath}`);
        })
        .catch((error: unknown) => {
          if (error instanceof RepoGraphError) {
            logger.error(`\n❌ Error generating RepoGraph map: ${error.message}`);
          } else {
            logger.error('\n❌ An unknown error occurred while generating the RepoGraph map.', error);
          }
          process.exit(1);
        });
    }
approved: true
