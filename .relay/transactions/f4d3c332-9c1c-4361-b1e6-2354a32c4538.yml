uuid: f4d3c332-9c1c-4361-b1e6-2354a32c4538
projectId: repograph
createdAt: '2025-07-28T03:54:40.260Z'
linesAdded: 8
linesRemoved: 3
gitCommitMsg: 'fix: configure conditional exports for browser resolution'
promptSummary: >-
  User's Vite setup is still failing to resolve the package's browser entry
  point. The fix involves adding conditional exports to package.json for browser
  environments and correcting an invalid type import in the browser-specific
  code.
reasoning:
  - >-
    Of course. It looks like the bundler is still trying to resolve the
    Node.js-specific entry point for your package. This is a common issue when a
    package needs to support both environments.
  - 'I''ve identified two problems:'
  - >-
    1.  The `package.json` `exports` field needs to be updated to tell bundlers
    like Vite which file to use in a browser environment for the main
    `repograph` import. I'll use conditional exports to solve this.
  - >-
    2.  Your browser entry point (`src/browser.ts`) was incorrectly importing a
    type definition from a Node.js-only file (`src/tree-sitter/languages.ts`),
    which can confuse some bundlers. I'll correct this path.
  - 'Here are the fixes:'
  - >-
    First, I'll update `package.json` to use conditional exports. This will make
    `import ... from "repograph"` automatically resolve to the correct
    browser-compatible file when used in a browser environment.
  - >-
    Second, I'll fix the incorrect type import in `src/browser.ts` to ensure the
    browser build is fully self-contained and doesn't reference any
    Node.js-specific files.
  - >-
    After applying these changes and rebuilding your package, Vite should be
    able to resolve `import { ... } from "repograph"` correctly in your web
    application.
operations:
  - type: write
    path: package.json
    content: |-
      <<<<<<< SEARCH
      :start_line: 11
      :end_line: 22
        "exports": {
          ".": {
            "types": "./dist/index.d.ts",
            "import": "./dist/index.js",
            "require": "./dist/index.cjs"
          },
          "./browser": {
            "types": "./dist/browser.d.ts",
            "import": "./dist/browser.js",
            "require": "./dist/browser.cjs"
          }
        },
      =======
        "exports": {
          ".": {
            "browser": {
              "types": "./dist/browser.d.ts",
              "import": "./dist/browser.js",
              "require": "./dist/browser.cjs"
            },
            "import": "./dist/index.js",
            "require": "./dist/index.cjs",
            "types": "./dist/index.d.ts"
          },
          "./browser": {
            "types": "./dist/browser.d.ts",
            "import": "./dist/browser.js",
            "require": "./dist/browser.cjs"
          }
        },
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/browser.ts
    content: >-
      <<<<<<< SEARCH

      :start_line: 16

      :end_line: 16

      export type { ParserInitializationOptions } from
      './tree-sitter/languages';

      =======

      export type { ParserInitializationOptions } from
      './tree-sitter/browser-languages';

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/browser.ts: |-
    // Browser-compatible entry point for repograph
    // Only exports functions that work in the browser environment

    // High-level API - analyzeProject works in browser when files are provided
    export { analyzeProject } from './browser-high-level';
    export { initializeParser } from './tree-sitter/browser-languages';

    // Browser-compatible pipeline components only
    export { createTreeSitterAnalyzer } from './pipeline/browser-analyze';
    export { createPageRanker } from './pipeline/browser-rank';
    export { createMarkdownRenderer } from './pipeline/render';

    // Logger utilities
    export { logger } from './utils/logger.util';
    export type { LogLevel, Logger } from './utils/logger.util';
    export type { ParserInitializationOptions } from './tree-sitter/languages';

    // Core types for building custom components
    export type {
      Analyzer,
      FileContent,
      CodeNode,
      CodeNodeType,
      CodeNodeVisibility,
      CodeEdge,
      CodeGraph,
      RankedCodeGraph,
      RepoGraphMap,
      RepoGraphOptions,
      CssIntent,
      Ranker,
      Renderer,
      RendererOptions,
    } from './types';
  package.json: |
    {
      "name": "repograph",
      "version": "0.1.34",
      "description": "Your Codebase, Visualized. Generate rich, semantic, and interactive codemaps with a functional, composable API.",
      "type": "module",
      "main": "./dist/index.js",
      "module": "./dist/index.js",
      "types": "./dist/index.d.ts",
      "bin": {
        "repograph": "./dist/index.js"
      },
      "exports": {
        ".": {
          "types": "./dist/index.d.ts",
          "import": "./dist/index.js",
          "require": "./dist/index.cjs"
        },
        "./browser": {
          "types": "./dist/browser.d.ts",
          "import": "./dist/browser.js",
          "require": "./dist/browser.cjs"
        }
      },
      "files": [
        "dist"
      ],
      "scripts": {
        "build": "tsup",
        "prepublishOnly": "npm run build",
        "dev": "tsup --watch",
        "test": "bun run test/run-tests.ts",
        "test:unit": "bun run test/run-tests.ts unit",
        "test:integration": "bun run test/run-tests.ts integration",
        "test:e2e": "bun run test/run-tests.ts e2e",
        "test:watch": "bun test --watch test/**/*.test.ts",
        "test:coverage": "bun test --coverage test/**/*.test.ts",
        "test:basic": "bun test test-basic.js",
        "lint": "eslint . --ext .ts",
        "format": "prettier --write \"src/**/*.ts\""
      },
      "dependencies": {
        "tinypool": "^0.8.2",
        "@types/js-yaml": "^4.0.9",
        "globby": "^14.1.0",
        "graphology": "^0.26.0",
        "graphology-pagerank": "^1.1.0",
        "js-yaml": "^4.1.0",
        "tree-sitter-c": "^0.24.1",
        "tree-sitter-c-sharp": "^0.23.1",
        "tree-sitter-cpp": "^0.23.4",
        "tree-sitter-css": "^0.23.2",
        "tree-sitter-go": "^0.23.4",
        "tree-sitter-java": "^0.23.5",
        "tree-sitter-php": "^0.23.12",
        "tree-sitter-python": "^0.23.6",
        "tree-sitter-ruby": "^0.23.1",
        "tree-sitter-rust": "^0.24.0",
        "tree-sitter-solidity": "^1.2.11",
        "tree-sitter-swift": "^0.7.1",
        "tree-sitter-typescript": "^0.23.2",
        "tree-sitter-vue": "^0.2.1",
        "web-tree-sitter": "^0.25.6"
      },
      "devDependencies": {
        "@types/node": "^20.12.12",
        "bun-types": "^1.1.12",
        "eslint": "^8.57.0",
        "prettier": "^3.2.5",
        "tsup": "^8.0.2",
        "typescript": "^5.4.5"
      },
      "keywords": [
        "codemap",
        "graph",
        "visualization",
        "code-analysis",
        "tree-sitter",
        "repo-analysis",
        "ai-context",
        "bun",
        "functional-programming"
      ],
      "author": "RelayCoder <you@example.com>",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/relaycoder/repograph.git"
      },
      "homepage": "https://github.com/relaycoder/repograph#readme",
      "bugs": {
        "url": "https://github.com/relaycoder/repograph/issues"
      },
      "engines": {
        "node": ">=18.0.0",
        "bun": ">=1.0.0"
      }
    }
approved: true
