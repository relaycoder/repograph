uuid: f19124e4-7253-48ee-a0f5-5a7c2c9d91f2
projectId: repograph
createdAt: '2025-07-17T15:34:53.941Z'
linesAdded: 15
linesRemoved: 13
gitCommitMsg: 'refactor(deps): Align dependencies and README with features'
promptSummary: >-
  The user asked to check if the README.md is aligned with the codebase,
  specifically the programmatic API. I found the API docs to be correct but
  identified and fixed misaligned dependencies in package.json and an incomplete
  list of supported languages in the README.
reasoning:
  - >-
    Of course. After reviewing the codebase, I can confirm that while the
    programmatic API examples in `README.md` are correctly aligned with the
    current code, there are other important parts of the project that are out of
    sync.
  - >-
    I will make two changes to align the project's packaging and documentation
    with its actual capabilities.
  - '### 1. Reorganize `package.json` Dependencies'
  - >-
    The `package.json` file incorrectly lists many of the required Tree-sitter
    language parsers under `devDependencies`. This would cause the tool to fail
    when installed by a user, as it wouldn't be able to find the necessary
    language grammars at runtime.
  - >-
    I will move all required `tree-sitter-*` packages to `dependencies` and
    remove a redundant one (`tree-sitter-javascript`), ensuring the tool is
    correctly packaged for distribution.
  - '### 2. Update `README.md` Supported Languages'
  - >-
    The `README.md` file is missing several languages that the codebase already
    supports (PHP, Ruby, Solidity, Swift, and Vue). I will update the "Supported
    Languages" section to accurately reflect all supported languages, giving
    potential users a complete picture of the tool's capabilities.
  - >-
    These changes will ensure your project is both correctly configured and
    accurately documented.
  - '---'
operations:
  - type: write
    path: package.json
    content: |-
      <<<<<<< SEARCH
      :start_line: 41
      :end_line: 54
      -------
        "dependencies": {
          "@types/js-yaml": "^4.0.9",
          "globby": "^14.1.0",
          "graphology": "^0.26.0",
          "graphology-pagerank": "^1.1.0",
          "ignore": "^7.0.5",
          "js-yaml": "^4.1.0",
          "tree-sitter-c": "^0.24.1",
          "tree-sitter-cpp": "^0.23.4",
          "tree-sitter-solidity": "^1.2.11",
          "tree-sitter-swift": "^0.7.1",
          "tree-sitter-vue": "^0.2.1",
          "web-tree-sitter": "^0.25.6"
        },
      =======
        "dependencies": {
          "@types/js-yaml": "^4.0.9",
          "globby": "^14.1.0",
          "graphology": "^0.26.0",
          "graphology-pagerank": "^1.1.0",
          "ignore": "^7.0.5",
          "js-yaml": "^4.1.0",
          "tree-sitter-c": "^0.24.1",
          "tree-sitter-c-sharp": "^0.23.1",
          "tree-sitter-cpp": "^0.23.4",
          "tree-sitter-go": "^0.23.4",
          "tree-sitter-java": "^0.23.5",
          "tree-sitter-php": "^0.23.12",
          "tree-sitter-python": "^0.23.6",
          "tree-sitter-ruby": "^0.23.1",
          "tree-sitter-rust": "^0.24.0",
          "tree-sitter-solidity": "^1.2.11",
          "tree-sitter-swift": "^0.7.1",
          "tree-sitter-typescript": "^0.23.2",
          "tree-sitter-vue": "^0.2.1",
          "web-tree-sitter": "^0.25.6"
        },
      >>>>>>> REPLACE
      <<<<<<< SEARCH
      :start_line: 55
      :end_line: 70
      -------
        "devDependencies": {
          "@types/node": "^20.12.12",
          "bun-types": "^1.1.12",
          "eslint": "^8.57.0",
          "prettier": "^3.2.5",
          "rimraf": "^5.0.7",
          "tree-sitter-c-sharp": "^0.23.1",
          "tree-sitter-go": "^0.23.4",
          "tree-sitter-java": "^0.23.5",
          "tree-sitter-javascript": "^0.23.1",
          "tree-sitter-php": "^0.23.12",
          "tree-sitter-python": "^0.23.6",
          "tree-sitter-ruby": "^0.23.1",
          "tree-sitter-rust": "^0.24.0",
          "tree-sitter-typescript": "^0.23.2",
          "typescript": "^5.4.5"
        },
      =======
        "devDependencies": {
          "@types/node": "^20.12.12",
          "bun-types": "^1.1.12",
          "eslint": "^8.57.0",
          "prettier": "^3.2.5",
          "rimraf": "^5.0.7",
          "typescript": "^5.4.5"
        },
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: README.md
    content: |-
      --- README.md
      +++ README.md
      @@ -279,17 +279,18 @@
       ## üåê Supported Languages
       
       Thanks to Tree-sitter, RepoGraph has robust support for a wide array of popular languages:
       
      --   TypeScript
      --   JavaScript
      +-   TypeScript / JavaScript (including JSX/TSX)
       -   Python
       -   Java
       -   Go
       -   Rust
      --   C
      --   C++
      +-   C / C++
       -   C#
      +-   PHP
      +-   Ruby
      +-   Solidity
      +-   Swift
      +-   Vue
       
       *Support for more languages is on the roadmap!*
    patchStrategy: new-unified
snapshot:
  package.json: |
    {
      "name": "repograph",
      "version": "0.1.1",
      "description": "Your Codebase, Visualized. Generate rich, semantic, and interactive codemaps with a functional, composable API.",
      "type": "module",
      "main": "./dist/index.js",
      "module": "./dist/index.js",
      "types": "./dist/index.d.ts",
      "bin": {
        "repograph": "./dist/index.js"
      },
      "exports": {
        ".": {
          "import": "./dist/index.js",
          "types": "./dist/index.d.ts"
        }
      },
      "files": [
        "dist"
      ],
      "scripts": {
        "clean": "rimraf dist",
        "build": "npm run clean && tsc -p tsconfig.build.json",
        "prepublishOnly": "npm run build",
        "dev": "tsc -w",
        "test": "bun run test/run-tests.ts",
        "test:unit": "bun run test/run-tests.ts unit",
        "test:integration": "bun run test/run-tests.ts integration",
        "test:e2e": "bun run test/run-tests.ts e2e",
        "test:watch": "bun test --watch test/**/*.test.ts",
        "test:coverage": "bun test --coverage test/**/*.test.ts",
        "test:basic": "bun test test-basic.js",
        "lint": "eslint . --ext .ts",
        "format": "prettier --write \"src/**/*.ts\""
      },
      "dependencies": {
        "@types/js-yaml": "^4.0.9",
        "globby": "^14.1.0",
        "graphology": "^0.26.0",
        "graphology-pagerank": "^1.1.0",
        "ignore": "^7.0.5",
        "js-yaml": "^4.1.0",
        "tree-sitter-c": "^0.24.1",
        "tree-sitter-cpp": "^0.23.4",
        "tree-sitter-solidity": "^1.2.11",
        "tree-sitter-swift": "^0.7.1",
        "tree-sitter-vue": "^0.2.1",
        "web-tree-sitter": "^0.25.6"
      },
      "devDependencies": {
        "@types/node": "^20.12.12",
        "bun-types": "^1.1.12",
        "eslint": "^8.57.0",
        "prettier": "^3.2.5",
        "rimraf": "^5.0.7",
        "tree-sitter-c-sharp": "^0.23.1",
        "tree-sitter-go": "^0.23.4",
        "tree-sitter-java": "^0.23.5",
        "tree-sitter-javascript": "^0.23.1",
        "tree-sitter-php": "^0.23.12",
        "tree-sitter-python": "^0.23.6",
        "tree-sitter-ruby": "^0.23.1",
        "tree-sitter-rust": "^0.24.0",
        "tree-sitter-typescript": "^0.23.2",
        "typescript": "^5.4.5"
      },
      "keywords": [
        "codemap",
        "graph",
        "visualization",
        "code-analysis",
        "tree-sitter",
        "repo-analysis",
        "ai-context",
        "bun",
        "functional-programming"
      ],
      "author": "Your Name <you@example.com>",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/your-username/repograph.git"
      },
      "homepage": "https://github.com/your-username/repograph#readme",
      "bugs": {
        "url": "https://github.com/your-username/repograph/issues"
      },
      "engines": {
        "node": ">=18.0.0",
        "bun": ">=1.0.0"
      }
    }
  README.md: >
    <div align="center">


    <!-- TODO: Add a cool logo here -->

    <!-- <img src="path/to/your/logo.svg" alt="RepoGraph Logo" width="150"/> -->


    # RepoGraph


    ### Your Codebase, Visualized & Understood.


    **Generate rich, semantic, and interactive codemaps to navigate, analyze,
    and master any repository.**


    [![NPM
    Version](https://img.shields.io/npm/v/repograph?style=for-the-badge&color=CB3837)](https://www.npmjs.com/package/repograph)

    [![License](https://img.shields.io/npm/l/repograph?style=for-the-badge&color=blue)](./LICENSE)

    [![Build
    Status](https://img.shields.io/github/actions/workflow/status/your-username/repograph/ci.yml?branch=main&style=for-the-badge)](https://github.com/your-username/repograph/actions)

    [![PRs
    Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=for-the-badge)](http://makeapullrequest.com)


    </div>


    ---


    Ever felt lost in a new codebase? Struggled to see the big picture or find
    the most critical files? RepoGraph is your solution. It's a powerful
    command-line tool and library that analyzes your code, builds a dependency
    graph, ranks key files and symbols, and generates a beautiful, detailed
    Markdown report.


    Whether you're onboarding new engineers, planning a large-scale refactor, or
    even providing context to an AI, RepoGraph gives you the map you need to
    navigate with confidence.


    ## ‚ú® Key Features & Benefits


    | Feature | Benefit |

    | :--- | :--- |

    | **üß† Multi-Language Semantic Analysis** | Uses **Tree-sitter** to parse
    your code with deep understanding, identifying not just files, but classes,
    functions, methods, and their relationships. |

    | **‚≠ê Intelligent Ranking Algorithms** | Go beyond file names. Rank code by
    importance using **PageRank** (centrality) or **Git Hot-Spots** (change
    frequency) to immediately find what matters. |

    | **üé® Rich Markdown Reports** | Generates a comprehensive `repograph.md`
    file with a project overview, dependency graphs, ranked file lists, and
    detailed symbol breakdowns. |

    | **üìä Automatic Mermaid.js Graphs** | Visualize your module dependencies
    with an automatically generated, easy-to-read Mermaid diagram right in your
    report. |

    | **üß© Composable Pipeline API** | A fully functional, composable API allows
    you to replace or extend any part of the pipeline: **Discover ‚Üí Analyze ‚Üí
    Rank ‚Üí Render**. |

    | **‚öôÔ∏è Highly Configurable CLI** | Fine-tune your analysis and output with a
    rich set of command-line flags to include/ignore files, customize the
    report, and more. |


    ## üöÄ Why Use RepoGraph?


    -   **Accelerate Onboarding:** Give new developers a guided tour of the
    codebase, highlighting the most important entry points and modules.

    -   **Master Code Navigation:** Understand how components are
    interconnected, making it easier to trace logic and predict the impact of
    changes.

    -   **Prioritize Refactoring:** Identify highly-central but frequently
    changed files‚Äîprime candidates for refactoring and stabilization.

    -   **Enhance AI Context:** Feed a structured, ranked, and semantically-rich
    overview of your codebase to LLMs for vastly improved code generation,
    analysis, and Q&A.

    -   **Streamline Architectural Reviews:** Get a high-level, data-driven view
    of your system's architecture to facilitate design discussions.


    ## üì∏ Gallery: Example Output


    Imagine running `repograph` on a small project. Here's a glimpse of the
    beautiful and insightful Markdown file it produces.


    ---


    # RepoGraph


    _Generated by RepoGraph on 2023-10-27T10:30:00.000Z_


    ## üöÄ Project Overview


    This repository contains 25 nodes (5 files).


    ### Module Dependency Graph


    ```mermaid

    graph TD
        src/index.ts["index.ts"] --> src/composer.ts["composer.ts"]
        src/index.ts["index.ts"] --> src/high-level.ts["high-level.ts"]
        src/high-level.ts["high-level.ts"] --> src/composer.ts["composer.ts"]
        src/composer.ts["composer.ts"] --> src/pipeline/discover.ts["discover.ts"]
        src/composer.ts["composer.ts"] --> src/pipeline/analyze.ts["analyze.ts"]
        src/composer.ts["composer.ts"] --> src/pipeline/rank.ts["rank.ts"]
        src/composer.ts["composer.ts"] --> src/pipeline/render.ts["render.ts"]
    ```


    ### Top 5 Most Important Files


    | Rank | File | Description |

    | :--- | :--- | :--- |

    | 1 | `src/pipeline/analyze.ts` | Key module in the architecture. |

    | 2 | `src/index.ts` | Key module in the architecture. |

    | 3 | `src/composer.ts` | Key module in the architecture. |

    | 4 | `src/types.ts` | Key module in the architecture. |

    | 5 | `src/pipeline/render.ts` | Key module in the architecture. |


    ---


    ## üìÇ File & Symbol Breakdown


    ### [`src/pipeline/analyze.ts`](./src/pipeline/analyze.ts)


    - **`function createTreeSitterAnalyzer`** - _L257_
      ```typescript
      export const createTreeSitterAnalyzer = (): Analyzer => {
      ```
    - **`function processFileDefinitions`** - _L291_
      ```typescript
      function processFileDefinitions(
      ```
    - **`function findEnclosingSymbolId`** (calls `parent`) - _L461_
      ```typescript
      function findEnclosingSymbolId(startNode: TSNode, file: FileContent, nodes: ReadonlyMap<string, CodeNode>): string | null {
      ```

    ---


    ## üì¶ Installation


    Install RepoGraph globally to use it as a CLI tool from anywhere on your
    system.


    ```bash

    # Using npm

    npm install -g repograph


    # Using yarn

    yarn global add repograph


    # Using pnpm

    pnpm add -g repograph

    ```


    ## üõ†Ô∏è Usage


    ### Command-Line Interface (CLI)


    The CLI is the quickest way to get a codemap. Simply navigate to your
    project's root directory and run the command.


    **Basic Usage**


    ```bash

    # Analyze the current directory and create repograph.md

    repograph

    ```


    **Advanced Usage**


    ```bash

    # Analyze a specific project, use the git-changes ranker, and customize the
    output

    repograph ./my-cool-project \
      --output docs/CodeMap.md \
      --ranking-strategy git-changes \
      --ignore "**/__tests__/**" \
      --no-mermaid
    ```


    #### All CLI Options


    | Argument | Alias | Description | Default |

    | :--- | :--- | :--- | :--- |

    | `root` | | The root directory of the repository to analyze. | `.` |

    | `--output <path>` | | Path to the output Markdown file. | `repograph.md` |

    | `--include <pattern>` | | Glob pattern for files to include. Can be
    specified multiple times. | `**/*` |

    | `--ignore <pattern>` | | Glob pattern for files to ignore. Can be
    specified multiple times. | |

    | `--no-gitignore` | | Do not respect `.gitignore` files. | `false` |

    | `--ranking-strategy <name>` | | Ranking strategy: `pagerank` or
    `git-changes`. | `pagerank` |

    | `--log-level <level>` | | Logging level: `silent`, `error`, `warn`,
    `info`, `debug`. | `info` |

    | `--help` | `-h` | Display the help message. | |

    | `--version` | `-v` | Display the version number. | |

    | **Output Formatting** | | | |

    | `--no-header` | | Do not include the main "RepoGraph" header. | `false` |

    | `--no-overview` | | Do not include the project overview section. | `false`
    |

    | `--no-mermaid` | | Do not include the Mermaid dependency graph. | `false`
    |

    | `--no-file-list` | | Do not include the list of top-ranked files. |
    `false` |

    | `--no-symbol-details` | | Do not include the detailed file and symbol
    breakdown. | `false` |

    | `--top-file-count <num>` | | Number of files in the top list. | `10` |

    | `--file-section-separator <str>`| | Custom separator for file sections. |
    `---` |

    | `--no-symbol-relations` | | Hide symbol relationship details (e.g.,
    `calls`). | `false` |

    | `--no-symbol-line-numbers` | | Hide line numbers for symbols. | `false` |

    | `--no-symbol-snippets` | | Hide code snippets for symbols. | `false` |

    | `--max-relations-to-show <num>`| | Max number of 'calls' relations to show
    per symbol. | `3` |


    ### üìö Programmatic API


    For ultimate flexibility, use the RepoGraph programmatic API. Integrate it
    into your own tools, build custom pipelines, and invent new ways to analyze
    code.


    #### High-Level API (`generateMap`)


    The easiest way to get started. It uses the default, battle-tested pipeline.


    ```typescript

    // my-script.ts

    import { generateMap } from 'repograph';

    import path from 'node:path';


    await generateMap({
      root: path.resolve('./path/to/your/project'),
      output: 'my-custom-report.md',
      rankingStrategy: 'git-changes',
      rendererOptions: {
        includeMermaidGraph: false,
        topFileCount: 20,
        symbolDetailOptions: {
          includeCodeSnippet: false,
        },
      },
    });


    console.log('‚úÖ Report generated!');

    ```


    #### Low-Level API (`createMapGenerator`)


    Unleash the full power of RepoGraph's composable architecture. Swap out any
    part of the pipeline with your own implementation.


    In this example, we'll create a custom ranker that scores files based on
    their line count.


    ```typescript

    // my-advanced-script.ts

    import {
      createMapGenerator,
      createDefaultDiscoverer,
      createTreeSitterAnalyzer,
      createMarkdownRenderer,
    } from 'repograph';

    import type { Ranker, CodeGraph, RankedCodeGraph } from 'repograph';


    // 1. Define our custom ranker

    const createLineCountRanker = (): Ranker => {
      return async (graph: CodeGraph): Promise<RankedCodeGraph> => {
        const ranks = new Map<string, number>();
        for (const [id, node] of graph.nodes) {
          // We only rank file nodes with this strategy
          if (node.type === 'file') {
            const lineCount = node.endLine - node.startLine;
            ranks.set(id, lineCount); // Simple score: more lines = higher rank
          } else {
            ranks.set(id, 0);
          }
        }
        // Normalize ranks between 0 and 1
        const maxRank = Math.max(...ranks.values(), 1);
        for (const [id, rank] of ranks.entries()) {
            ranks.set(id, rank / maxRank);
        }
        return { ...graph, ranks };
      };
    };


    // 2. Compose the pipeline with our custom ranker

    const myCustomGenerator = createMapGenerator({
      discover: createDefaultDiscoverer(),
      analyze: createTreeSitterAnalyzer(),
      rank: createLineCountRanker(), // <-- Use our custom ranker here!
      render: createMarkdownRenderer(),
    });


    // 3. Run the generator

    await myCustomGenerator({
      root: './path/to/your/project',
      output: 'line-count-report.md',
    });


    console.log('‚úÖ Custom report generated!');

    ```


    ## üî¨ The RepoGraph Pipeline


    RepoGraph processes your code in four distinct, composable stages:


    1.  **`üîç Discover`**
        -   Scans the filesystem using glob patterns.
        -   Respects `.gitignore` and custom ignore rules.
        -   Reads all matching files into memory.

    2.  **`üß† Analyze`**
        -   Groups files by language and parses them using **Tree-sitter**.
        -   Executes language-specific queries to find symbol definitions (classes, functions, etc.) and relationships (imports, calls, inheritance).
        -   Builds the core `CodeGraph` of nodes and edges.

    3.  **`‚≠ê Rank`**
        -   Takes the `CodeGraph` as input.
        -   Applies a ranking algorithm (like PageRank) to assign a score to every node in the graph.
        -   Produces a `RankedCodeGraph`.

    4.  **`üé® Render`**
        -   Receives the `RankedCodeGraph` and rendering options.
        -   Generates the final, human-readable Markdown output, including the summary, Mermaid graph, and detailed breakdowns.

    ## üåê Supported Languages


    Thanks to Tree-sitter, RepoGraph has robust support for a wide array of
    popular languages:


    -   TypeScript

    -   JavaScript

    -   Python

    -   Java

    -   Go

    -   Rust

    -   C

    -   C++

    -   C#


    *Support for more languages is on the roadmap!*


    ## üôå Contributing


    Contributions are welcome! Whether you're fixing a bug, adding a feature, or
    improving documentation, your help is appreciated.


    1.  Fork the repository.

    2.  Create your feature branch (`git checkout -b feature/AmazingFeature`).

    3.  Make your changes.

    4.  Commit your changes (`git commit -m 'Add some AmazingFeature'`).

    5.  Push to the branch (`git push origin feature/AmazingFeature`).

    6.  Open a Pull Request.


    The project uses `bun` for development, `eslint` for linting, and `prettier`
    for formatting. Please ensure your contributions adhere to the existing code
    style.


    ## üìú License


    This project is licensed under the **MIT License**. See the
    [LICENSE](./LICENSE) file for details.
approved: true
