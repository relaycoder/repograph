uuid: a88832a8-a579-450a-b2f7-b16a2f7c0883
projectId: repograph
createdAt: '2025-07-22T19:17:27.763Z'
linesAdded: 43
linesRemoved: 60
gitCommitMsg: 'build: migrate to tsup and remove .js extensions in imports'
promptSummary: >-
  The user wants to switch the build system to `tsup` and remove `.js`
  extensions from import paths.
reasoning:
  - >-
    I will start by refactoring your project to use `tsup` for building, which
    is a modern bundler for TypeScript libraries. This change will also address
    your preference for removing `.js` extensions from import statements.
  - '### Step 1: Build System Update'
  - >-
    First, I'll update your `package.json` to incorporate `tsup`. This involves
    adding it as a development dependency, removing the now-redundant `rimraf`
    package, and updating the `build` and `dev` scripts to use `tsup`. I'll also
    remove the `clean` script as `tsup` handles this.
  - '### Step 2: Configure `tsup`'
  - >-
    Next, I'll create a `tsup.config.ts` file at the root of your project. This
    configuration tells `tsup` how to bundle your code. It specifies entry
    points (including the analyzer worker), output format, and other build
    options.
  - '### Step 3: Streamline TypeScript Configuration'
  - >-
    With `tsup` in place, the separate `tsconfig.build.json` is no longer
    necessary, as `tsup` will use your main `tsconfig.json`. I will delete the
    build-specific config file.
  - >-
    To align with the removal of file extensions from imports, I'll also adjust
    the main `tsconfig.json` by removing the `allowImportingTsExtensions`
    option, which is no longer applicable.
  - '### Step 4: Update Import Paths'
  - >-
    Finally, I'll begin updating the import paths in your source files to remove
    the `.js` extension, starting with some key files.
  - I will continue with the rest of the files once you approve these changes.
operations:
  - type: write
    path: package.json
    content: |-
      <<<<<<< SEARCH
        "scripts": {
          "clean": "rimraf dist",
          "build": "npm run clean && tsc -p tsconfig.build.json",
          "prepublishOnly": "npm run build",
          "dev": "tsc -w",
          "test": "bun run test/run-tests.ts",
          "test:unit": "bun run test/run-tests.ts unit",
          "test:integration": "bun run test/run-tests.ts integration",
          "test:e2e": "bun run test/run-tests.ts e2e",
          "test:watch": "bun test --watch test/**/*.test.ts",
          "test:coverage": "bun test --coverage test/**/*.test.ts",
          "test:basic": "bun test test-basic.js",
          "lint": "eslint . --ext .ts",
          "format": "prettier --write \"src/**/*.ts\""
        },
      =======
        "scripts": {
          "build": "tsup",
          "prepublishOnly": "npm run build",
          "dev": "tsup --watch",
          "test": "bun run test/run-tests.ts",
          "test:unit": "bun run test/run-tests.ts unit",
          "test:integration": "bun run test/run-tests.ts integration",
          "test:e2e": "bun run test/run-tests.ts e2e",
          "test:watch": "bun test --watch test/**/*.test.ts",
          "test:coverage": "bun test --coverage test/**/*.test.ts",
          "test:basic": "bun test test-basic.js",
          "lint": "eslint . --ext .ts",
          "format": "prettier --write \"src/**/*.ts\""
        },
      >>>>>>> REPLACE
      <<<<<<< SEARCH
        "devDependencies": {
          "@types/node": "^20.12.12",
          "bun-types": "^1.1.12",
          "eslint": "^8.57.0",
          "prettier": "^3.2.5",
          "rimraf": "^5.0.7",
          "typescript": "^5.4.5"
        },
      =======
        "devDependencies": {
          "@types/node": "^20.12.12",
          "bun-types": "^1.1.12",
          "eslint": "^8.57.0",
          "prettier": "^3.2.5",
          "tsup": "^8.0.2",
          "typescript": "^5.4.5"
        },
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: tsup.config.ts
    content: |-
      import { defineConfig } from 'tsup';

      export default defineConfig({
        entry: ['src/index.ts', 'src/pipeline/analyzer.worker.ts'],
        format: ['esm'],
        target: 'es2022',
        dts: true,
        sourcemap: true,
        clean: true,
        splitting: true,
        treeshake: true,
        minify: false,
        outDir: 'dist',
      });
    patchStrategy: replace
  - type: delete
    path: tsconfig.build.json
  - type: write
    path: tsconfig.json
    content: |-
      <<<<<<< SEARCH
          "allowImportingTsExtensions": true,
      =======
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/high-level.ts
    content: >-
      <<<<<<< SEARCH

      import { createDefaultDiscoverer } from './pipeline/discover.js';

      import { createTreeSitterAnalyzer } from './pipeline/analyze.js';

      import { createPageRanker, createGitRanker } from './pipeline/rank.js';

      import { createMarkdownRenderer } from './pipeline/render.js';

      import type { RepoGraphOptions, Ranker, RankedCodeGraph } from
      './types.js';

      =======

      import { createDefaultDiscoverer } from './pipeline/discover';

      import { createTreeSitterAnalyzer } from './pipeline/analyze';

      import { createPageRanker, createGitRanker } from './pipeline/rank';

      import { createMarkdownRenderer } from './pipeline/render';

      import type { RepoGraphOptions, Ranker, RankedCodeGraph } from './types';

      >>>>>>> REPLACE

      <<<<<<< SEARCH

      import { logger } from './utils/logger.util.js';

      import { writeFile } from './utils/fs.util.js';

      import { RepoGraphError } from './utils/error.util.js';

      =======

      import { logger } from './utils/logger.util';

      import { writeFile } from './utils/fs.util';

      import { RepoGraphError } from './utils/error.util';

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/index.ts
    content: |-
      <<<<<<< SEARCH
      import { logger } from './utils/logger.util.js';
      import { RepoGraphError } from './utils/error.util.js';
      // High-Level API for simple use cases
      import { generateMap as executeGenerateMap } from './high-level.js';
      import type { RepoGraphOptions as IRepoGraphOptions } from './types.js';

      export { generateMap, analyzeProject } from './high-level.js';

      // Low-Level API for composition and advanced use cases
      export { createMapGenerator } from './composer.js';

      // Default pipeline component factories
      export { createDefaultDiscoverer } from './pipeline/discover.js';
      export { createTreeSitterAnalyzer } from './pipeline/analyze.js';
      export { createPageRanker, createGitRanker } from './pipeline/rank.js';
      export { createMarkdownRenderer } from './pipeline/render.js';

      // Logger utilities
      export { logger } from './utils/logger.util.js';
      export type { Logger, LogLevel } from './utils/logger.util.js';

      // Core types for building custom components
      export type {
        FileContent,
        CodeNode,
        CodeNodeType,
        CodeNodeVisibility,
        CodeEdge,
        CodeGraph,
        RankedCodeGraph,
        RepoGraphMap,
        RepoGraphOptions,
        RendererOptions,
        FileDiscoverer,
        CssIntent,
        Analyzer,
        Ranker,
        Renderer,
      } from './types.js';
      =======
      import { logger } from './utils/logger.util';
      import { RepoGraphError } from './utils/error.util';
      // High-Level API for simple use cases
      import { generateMap as executeGenerateMap } from './high-level';
      import type { RepoGraphOptions as IRepoGraphOptions } from './types';

      export { generateMap, analyzeProject } from './high-level';

      // Low-Level API for composition and advanced use cases
      export { createMapGenerator } from './composer';

      // Default pipeline component factories
      export { createDefaultDiscoverer } from './pipeline/discover';
      export { createTreeSitterAnalyzer } from './pipeline/analyze';
      export { createPageRanker, createGitRanker } from './pipeline/rank';
      export { createMarkdownRenderer } from './pipeline/render';

      // Logger utilities
      export { logger } from './utils/logger.util';
      export type { Logger, LogLevel } from './utils/logger.util';

      // Core types for building custom components
      export type {
        FileContent,
        CodeNode,
        CodeNodeType,
        CodeNodeVisibility,
        CodeEdge,
        CodeGraph,
        RankedCodeGraph,
        RepoGraphMap,
        RepoGraphOptions,
        RendererOptions,
        FileDiscoverer,
        CssIntent,
        Analyzer,
        Ranker,
        Renderer,
      } from './types';
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/pipeline/analyze.ts
    content: >-
      <<<<<<< SEARCH

      import type { Analyzer, CodeNode, CodeEdge, FileContent,
      UnresolvedRelation } from '../types.js';

      import { getLanguageConfigForFile, type LanguageConfig } from
      '../tree-sitter/language-config.js';

      import { logger } from '../utils/logger.util.js';

      import { ParserError } from '../utils/error.util.js';

      =======

      import type { Analyzer, CodeNode, CodeEdge, FileContent,
      UnresolvedRelation } from '../types';

      import { getLanguageConfigForFile, type LanguageConfig } from
      '../tree-sitter/language-config';

      import { logger } from '../utils/logger.util';

      import { ParserError } from '../utils/error.util';

      >>>>>>> REPLACE

      <<<<<<< SEARCH

      import processFileInWorker from './analyzer.worker.js';

      =======

      import processFileInWorker from './analyzer.worker';

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  tsup.config.ts: null
  package.json: |
    {
      "name": "repograph",
      "version": "0.1.5",
      "description": "Your Codebase, Visualized. Generate rich, semantic, and interactive codemaps with a functional, composable API.",
      "type": "module",
      "main": "./dist/index.js",
      "module": "./dist/index.js",
      "types": "./dist/index.d.ts",
      "bin": {
        "repograph": "./dist/index.js"
      },
      "exports": {
        ".": {
          "import": "./dist/index.js",
          "types": "./dist/index.d.ts"
        }
      },
      "files": [
        "dist"
      ],
      "scripts": {
        "clean": "rimraf dist",
        "build": "npm run clean && tsc -p tsconfig.build.json",
        "prepublishOnly": "npm run build",
        "dev": "tsc -w",
        "test": "bun run test/run-tests.ts",
        "test:unit": "bun run test/run-tests.ts unit",
        "test:integration": "bun run test/run-tests.ts integration",
        "test:e2e": "bun run test/run-tests.ts e2e",
        "test:watch": "bun test --watch test/**/*.test.ts",
        "test:coverage": "bun test --coverage test/**/*.test.ts",
        "test:basic": "bun test test-basic.js",
        "lint": "eslint . --ext .ts",
        "format": "prettier --write \"src/**/*.ts\""
      },
      "dependencies": {
        "tinypool": "^0.8.2",
        "@types/js-yaml": "^4.0.9",
        "globby": "^14.1.0",
        "graphology": "^0.26.0",
        "graphology-pagerank": "^1.1.0",
        "ignore": "^7.0.5",
        "js-yaml": "^4.1.0",
        "tree-sitter-c": "^0.24.1",
        "tree-sitter-c-sharp": "^0.23.1",
        "tree-sitter-cpp": "^0.23.4",
        "tree-sitter-css": "^0.23.2",
        "tree-sitter-go": "^0.23.4",
        "tree-sitter-java": "^0.23.5",
        "tree-sitter-php": "^0.23.12",
        "tree-sitter-python": "^0.23.6",
        "tree-sitter-ruby": "^0.23.1",
        "tree-sitter-rust": "^0.24.0",
        "tree-sitter-solidity": "^1.2.11",
        "tree-sitter-swift": "^0.7.1",
        "tree-sitter-typescript": "^0.23.2",
        "tree-sitter-vue": "^0.2.1",
        "web-tree-sitter": "^0.25.6"
      },
      "devDependencies": {
        "@types/node": "^20.12.12",
        "bun-types": "^1.1.12",
        "eslint": "^8.57.0",
        "prettier": "^3.2.5",
        "rimraf": "^5.0.7",
        "typescript": "^5.4.5"
      },
      "keywords": [
        "codemap",
        "graph",
        "visualization",
        "code-analysis",
        "tree-sitter",
        "repo-analysis",
        "ai-context",
        "bun",
        "functional-programming"
      ],
      "author": "RelayCoder <you@example.com>",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/relaycoder/repograph.git"
      },
      "homepage": "https://github.com/relaycoder/repograph#readme",
      "bugs": {
        "url": "https://github.com/relaycoder/repograph/issues"
      },
      "engines": {
        "node": ">=18.0.0",
        "bun": ">=1.0.0"
      }
    }
  tsconfig.build.json: |-
    {
      "compilerOptions": {
        "lib": ["ESNext"],
        "target": "ES2022",
        "module": "ESNext",
        "moduleDetection": "force",
        "jsx": "react-jsx",
        "allowJs": true,
        "moduleResolution": "bundler",
        "verbatimModuleSyntax": true,
        "noEmit": false,
        "outDir": "./dist",
        "declaration": true,
        "declarationMap": true,
        "sourceMap": true,
        "strict": true,
        "skipLibCheck": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedIndexedAccess": true,
        "noImplicitOverride": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "noPropertyAccessFromIndexSignature": true,
        "typeRoots": ["./node_modules/@types", "./src/types"]
      },
      "include": ["src/**/*"],
      "exclude": ["src/**/*.test.ts", "src/**/*.spec.ts"]
    }
  tsconfig.json: |
    {
      "compilerOptions": {
        // Environment setup & latest features
        "lib": ["ESNext"],
        "target": "ESNext",
        "module": "Preserve",
        "moduleDetection": "force",
        "jsx": "react-jsx",
        "allowJs": true,

        // Bundler mode
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "verbatimModuleSyntax": true,
        "noEmit": true,

        // Best practices
        "strict": true,
        "skipLibCheck": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedIndexedAccess": true,
        "noImplicitOverride": true,

        // Some stricter flags (disabled by default)
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "noPropertyAccessFromIndexSignature": true,

        // Type roots
        "typeRoots": ["./node_modules/@types", "./src/types", "./test/**/*"]
      }
    }
  src/high-level.ts: >-
    import { createDefaultDiscoverer } from './pipeline/discover.js';

    import { createTreeSitterAnalyzer } from './pipeline/analyze.js';

    import { createPageRanker, createGitRanker } from './pipeline/rank.js';

    import { createMarkdownRenderer } from './pipeline/render.js';

    import type { RepoGraphOptions, Ranker, RankedCodeGraph } from './types.js';

    import path from 'node:path';

    import { logger } from './utils/logger.util.js';

    import { writeFile } from './utils/fs.util.js';

    import { RepoGraphError } from './utils/error.util.js';


    const selectRanker = (rankingStrategy: RepoGraphOptions['rankingStrategy'] =
    'pagerank'): Ranker => {
      if (rankingStrategy === 'git-changes') {
        return createGitRanker();
      }
      if (rankingStrategy === 'pagerank') {
        return createPageRanker();
      }
      throw new Error(`Invalid ranking strategy: '${rankingStrategy}'. Available options are 'pagerank', 'git-changes'.`);
    };


    /**
     * A mid-level API for programmatically generating and receiving the code graph
     * without rendering it to a file. Ideal for integration with other tools.
     *
     * @param options The configuration object for generating the map.
     * @returns The generated `RankedCodeGraph`.
     */
    export const analyzeProject = async (options: RepoGraphOptions = {}):
    Promise<RankedCodeGraph> => {
      const { root = process.cwd(), logLevel, include, ignore, noGitignore, maxWorkers } = options;

      if (logLevel) {
        logger.setLevel(logLevel);
      }

      // Validate options before entering the main try...catch block to provide clear errors.
      const ranker = selectRanker(options.rankingStrategy);

      try {
        logger.info('1/3 Discovering files...');
        const discoverer = createDefaultDiscoverer();
        const files = await discoverer({ root: path.resolve(root), include, ignore, noGitignore });
        logger.debug(`  -> Found ${files.length} files to analyze.`);

        logger.info('2/3 Analyzing code and building graph...');
        const analyzer = createTreeSitterAnalyzer({ maxWorkers });
        const graph = await analyzer(files);
        logger.debug(`  -> Built graph with ${graph.nodes.size} nodes and ${graph.edges.length} edges.`);

        logger.info('3/3 Ranking graph nodes...');
        const rankedGraph = await ranker(graph);
        logger.debug('  -> Ranking complete.');

        return rankedGraph;
      } catch (error) {
        throw new RepoGraphError(`Failed to analyze project`, error);
      }
    };


    /**
     * The primary, easy-to-use entry point for RepoGraph. It orchestrates the
     * default pipeline based on a configuration object to generate a codemap.
     *
     * @param options The configuration object for generating the map.
     */
    export const generateMap = async (options: RepoGraphOptions = {}):
    Promise<void> => {
      const finalOptions = { ...options, logLevel: options.logLevel ?? 'info' };

      const {
        root = process.cwd(),
        output = './repograph.md',
      } = finalOptions;

      try {
        // We get the full ranked graph first
        const rankedGraph = await analyzeProject(finalOptions);

        logger.info('4/4 Rendering output...');
        const renderer = createMarkdownRenderer();
        const markdown = renderer(rankedGraph, finalOptions.rendererOptions);
        logger.debug('  -> Rendering complete.');

        const outputPath = path.isAbsolute(output) ? output : path.resolve(root, output);

        logger.info(`Writing report to ${path.relative(process.cwd(), outputPath)}...`);
        await writeFile(outputPath, markdown);
        logger.info('  -> Report saved.');
      } catch (error) {
        // The underlying `analyzeProject` already wraps the error, so we just re-throw.
        throw error;
      }
    };
  src/index.ts: |
    #!/usr/bin/env bun

    import { logger } from './utils/logger.util.js';
    import { RepoGraphError } from './utils/error.util.js';
    // High-Level API for simple use cases
    import { generateMap as executeGenerateMap } from './high-level.js';
    import type { RepoGraphOptions as IRepoGraphOptions } from './types.js';

    export { generateMap, analyzeProject } from './high-level.js';

    // Low-Level API for composition and advanced use cases
    export { createMapGenerator } from './composer.js';

    // Default pipeline component factories
    export { createDefaultDiscoverer } from './pipeline/discover.js';
    export { createTreeSitterAnalyzer } from './pipeline/analyze.js';
    export { createPageRanker, createGitRanker } from './pipeline/rank.js';
    export { createMarkdownRenderer } from './pipeline/render.js';

    // Logger utilities
    export { logger } from './utils/logger.util.js';
    export type { Logger, LogLevel } from './utils/logger.util.js';

    // Core types for building custom components
    export type {
      FileContent,
      CodeNode,
      CodeNodeType,
      CodeNodeVisibility,
      CodeEdge,
      CodeGraph,
      RankedCodeGraph,
      RepoGraphMap,
      RepoGraphOptions,
      RendererOptions,
      FileDiscoverer,
      CssIntent,
      Analyzer,
      Ranker,
      Renderer,
    } from './types.js';

    // This section runs only when the script is executed directly from the CLI
    import { fileURLToPath } from 'node:url';
    import path from 'node:path';

    const isRunningDirectly = () => {
      if (typeof process.argv[1] === 'undefined') return false;
      const runningFile = path.resolve(process.argv[1]);
      const currentFile = fileURLToPath(import.meta.url);
      return runningFile === currentFile;
    };

    if (isRunningDirectly()) {
      (async () => {
        const args = process.argv.slice(2);

        if (args.includes('--help') || args.includes('-h')) {
          console.log(`
    Usage: repograph [root] [options]

    Arguments:
      root                     The root directory of the repository to analyze. Defaults to the current working directory.

    Options:
      -h, --help               Display this help message.
      -v, --version            Display the version number.
      --output <path>          Path to the output Markdown file. (default: "repograph.md")
      --include <pattern>      Glob pattern for files to include. Can be specified multiple times.
      --ignore <pattern>       Glob pattern for files to ignore. Can be specified multiple times.
      --no-gitignore           Do not respect .gitignore files.
      --ranking-strategy <name> The ranking strategy to use. (default: "pagerank", options: "pagerank", "git-changes")
      --max-workers <num>      Set the maximum number of parallel workers for analysis. (default: 1)
      --log-level <level>      Set the logging level. (default: "info", options: "silent", "error", "warn", "info", "debug")

    Output Formatting:
      --no-header              Do not include the main "RepoGraph" header.
      --no-overview            Do not include the project overview section.
      --no-mermaid             Do not include the Mermaid dependency graph.
      --no-file-list           Do not include the list of top-ranked files.
      --no-symbol-details      Do not include the detailed file and symbol breakdown.
      --top-file-count <num>   Set the number of files in the top list. (default: 10)
      --file-section-separator <str> Custom separator for file sections. (default: "---")
      --no-symbol-relations    Hide symbol relationship details (e.g., calls, implements).
      --no-symbol-line-numbers Hide line numbers for symbols.
      --no-symbol-snippets     Hide code snippets for symbols.
      --max-relations-to-show <num> Max number of 'calls' relations to show per symbol. (default: 3)
        `);
          process.exit(0);
        }

        if (args.includes('--version') || args.includes('-v')) {
          const { readFileSync } = await import('node:fs');
          const pkgPath = new URL('../package.json', import.meta.url);
          const pkg = JSON.parse(readFileSync(pkgPath, 'utf-8'));
          console.log(pkg.version);
          process.exit(0);
        }

        // We need a mutable version of the options to build it from arguments.
        const options: {
          root?: string;
          output?: string;
          include?: readonly string[];
          ignore?: readonly string[];
          noGitignore?: boolean;
          maxWorkers?: number;
          rankingStrategy?: 'pagerank' | 'git-changes';
          logLevel?: IRepoGraphOptions['logLevel'];
          rendererOptions?: IRepoGraphOptions['rendererOptions'];
        } = {};
        const includePatterns: string[] = [];
        const ignorePatterns: string[] = [];
        // We need a mutable version of rendererOptions to build from CLI args
        const rendererOptions: {
          customHeader?: string;
          includeHeader?: boolean;
          includeOverview?: boolean;
          includeMermaidGraph?: boolean;
          includeFileList?: boolean;
          topFileCount?: number;
          includeSymbolDetails?: boolean;
          fileSectionSeparator?: string;
          symbolDetailOptions?: {
            includeRelations?: boolean;
            includeLineNumber?: boolean;
            includeCodeSnippet?: boolean;
            maxRelationsToShow?: number;
          };
        } = {};

        for (let i = 0; i < args.length; i++) {
          const arg = args[i];
          if (!arg) {
            continue;
          }
          switch (arg) {
            case '--output':
              options.output = args[++i];
              break;
            case '--include':
              includePatterns.push(args[++i] as string);
              break;
            case '--ignore':
              ignorePatterns.push(args[++i] as string);
              break;
            case '--no-gitignore':
              options.noGitignore = true;
              break;
            case '--ranking-strategy':
              options.rankingStrategy = args[++i] as IRepoGraphOptions['rankingStrategy'];
              break;
            case '--max-workers':
              options.maxWorkers = parseInt(args[++i] as string, 10);
              break;
            case '--log-level':
              options.logLevel = args[++i] as IRepoGraphOptions['logLevel'];
              break;
            // --- Renderer Options ---
            case '--no-header':
              rendererOptions.includeHeader = false;
              break;
            case '--no-overview':
              rendererOptions.includeOverview = false;
              break;
            case '--no-mermaid':
              rendererOptions.includeMermaidGraph = false;
              break;
            case '--no-file-list':
              rendererOptions.includeFileList = false;
              break;
            case '--no-symbol-details':
              rendererOptions.includeSymbolDetails = false;
              break;
            case '--top-file-count':
              rendererOptions.topFileCount = parseInt(args[++i] as string, 10);
              break;
            case '--file-section-separator':
              rendererOptions.fileSectionSeparator = args[++i];
              break;
            case '--no-symbol-relations':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeRelations: false };
              break;
            case '--no-symbol-line-numbers':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeLineNumber: false };
              break;
            case '--no-symbol-snippets':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), includeCodeSnippet: false };
              break;
            case '--max-relations-to-show':
              rendererOptions.symbolDetailOptions = { ...(rendererOptions.symbolDetailOptions || {}), maxRelationsToShow: parseInt(args[++i] as string, 10) };
              break;
            default:
              if (!arg.startsWith('-')) {
                options.root = arg;
              }
              break;
          }
        }

        if (includePatterns.length > 0) {
          options.include = includePatterns;
        }
        if (ignorePatterns.length > 0) {
          options.ignore = ignorePatterns;
        }
        if (Object.keys(rendererOptions).length > 0) {
          options.rendererOptions = rendererOptions;
        }

        const finalOutput = path.resolve(options.root || process.cwd(), options.output || 'repograph.md');

        logger.info(`Starting RepoGraph analysis for "${path.resolve(options.root || process.cwd())}"...`);

        try {
          await executeGenerateMap(options);
          const relativePath = path.relative(process.cwd(), finalOutput);
          logger.info(`\n✅ Success! RepoGraph map saved to ${relativePath}`);
        } catch (error: unknown) {
          if (error instanceof RepoGraphError) {
            logger.error(`\n❌ Error generating RepoGraph map: ${error.message}`);
          } else {
            logger.error('\n❌ An unknown error occurred while generating the RepoGraph map.', error);
          }
          process.exit(1);
        }
      })().catch((error) => {
        console.error('Fatal error:', error);
        process.exit(1);
      });
    }
  src/pipeline/analyze.ts: >-
    import path from 'node:path';

    import type { Analyzer, CodeNode, CodeEdge, FileContent, UnresolvedRelation
    } from '../types.js';

    import { getLanguageConfigForFile, type LanguageConfig } from
    '../tree-sitter/language-config.js';

    import { logger } from '../utils/logger.util.js';

    import { ParserError } from '../utils/error.util.js';

    import { fileURLToPath } from 'node:url';

    import Tinypool from 'tinypool';

    import processFileInWorker from './analyzer.worker.js';


    const normalizePath = (p: string) => p.replace(/\\/g, '/');


    // --- LANGUAGE-SPECIFIC IMPORT RESOLUTION LOGIC ---

    // This part is needed on the main thread to resolve import paths.


    const createModuleResolver = (extensions: string[]) => (fromFile: string,
    sourcePath: string, allFiles: string[]): string | null => {
      const basedir = normalizePath(path.dirname(fromFile));
      const importPath = normalizePath(path.join(basedir, sourcePath));

      // First, check if the path as-is (with extension) exists
      if (path.extname(importPath) && allFiles.includes(importPath)) {
        return importPath;
      }

      const parsedPath = path.parse(importPath);
      const basePath = normalizePath(path.join(parsedPath.dir, parsedPath.name));
      for (const ext of extensions) {
          const potentialFile = basePath + ext;
          if (allFiles.includes(potentialFile)) return potentialFile;
      }
      
      for (const ext of extensions) {
          const potentialIndexFile = normalizePath(path.join(importPath, 'index' + ext));
          if (allFiles.includes(potentialIndexFile)) return potentialIndexFile;
      }

      if (allFiles.includes(importPath)) return importPath;
      return null;      
    };


    const resolveImportFactory = (endings: string[], packageStyle: boolean =
    false) => (fromFile: string, sourcePath: string, allFiles: string[]): string
    | null => {
      const basedir = normalizePath(path.dirname(fromFile));
      const resolvedPathAsIs = normalizePath(path.join(basedir, sourcePath));
      if (allFiles.includes(resolvedPathAsIs)) return resolvedPathAsIs;

      const parsedSourcePath = path.parse(sourcePath);
      const basePath = normalizePath(path.join(basedir, parsedSourcePath.dir, parsedSourcePath.name));
      for (const end of endings) {
        const potentialPath = basePath + end;
        if (allFiles.includes(potentialPath)) return potentialPath;
      }
      
      if (packageStyle && sourcePath.includes('.')) {
        const packagePath = normalizePath(sourcePath.replace(/\./g, '/'));
        for (const end of endings) {
          const fileFromRoot = packagePath + end;
          if (allFiles.includes(fileFromRoot)) return fileFromRoot;
        }
      }
      return null;
    };


    type ImportResolver = (fromFile: string, sourcePath: string, allFiles:
    string[]) => string | null;


    const languageImportResolvers: Record<string, ImportResolver> = {
      default: (fromFile, sourcePath, allFiles) => {
        const resolvedPathAsIs = path.normalize(path.join(path.dirname(fromFile), sourcePath));
        return allFiles.includes(resolvedPathAsIs) ? resolvedPathAsIs : null;
      },
      typescript: createModuleResolver(['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs', '.css']),
      javascript: createModuleResolver(['.js', 'jsx', '.mjs', '.cjs']),
      tsx: createModuleResolver(['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs', '.css']),
      python: (fromFile: string, sourcePath: string, allFiles: string[]): string | null => {
        const basedir = normalizePath(path.dirname(fromFile));
        if (sourcePath.startsWith('.')) {
          const level = sourcePath.match(/^\.+/)?.[0]?.length ?? 0;
          const modulePath = sourcePath.substring(level).replace(/\./g, '/');
          let currentDir = basedir;
          for (let i = 1; i < level; i++) currentDir = path.dirname(currentDir);
          const targetPyFile = normalizePath(path.join(currentDir, modulePath) + '.py');
          if (allFiles.includes(targetPyFile)) return targetPyFile;
          const resolvedPath = normalizePath(path.join(currentDir, modulePath, '__init__.py'));
          if (allFiles.includes(resolvedPath)) return resolvedPath;
        }
        return resolveImportFactory(['.py', '/__init__.py'])(fromFile, sourcePath, allFiles);
      },
      java: resolveImportFactory(['.java'], true),
      csharp: resolveImportFactory(['.cs'], true),
      php: resolveImportFactory(['.php']),
      rust: (fromFile: string, sourcePath: string, allFiles: string[]): string | null => {
        const basedir = normalizePath(path.dirname(fromFile));
        const resolvedPath = normalizePath(path.join(basedir, sourcePath + '.rs'));
        if (allFiles.includes(resolvedPath)) return resolvedPath;
        return resolveImportFactory(['.rs', '/mod.rs'])(fromFile, sourcePath, allFiles);
      },
    };


    const getImportResolver = (langName: string): ImportResolver =>
    languageImportResolvers[langName] ?? languageImportResolvers['default']!;


    class SymbolResolver {
      private fileImports = new Map<string, string[]>();

      constructor(private nodes: ReadonlyMap<string, CodeNode>, edges: readonly CodeEdge[]) {
        for (const edge of edges) {
          if (edge.type === 'imports') {
            if (!this.fileImports.has(edge.fromId)) this.fileImports.set(edge.fromId, []);
            this.fileImports.get(edge.fromId)!.push(edge.toId);
          }
        }
      }

      resolve(symbolName: string, contextFile: string): CodeNode | null {
        // 1. Same file
        const sameFileId = `${contextFile}#${symbolName}`;
        if (this.nodes.has(sameFileId)) return this.nodes.get(sameFileId)!;

        // 2. Imported files
        const importedFiles = this.fileImports.get(contextFile) || [];
        for (const file of importedFiles) {
          const importedId = `${file}#${symbolName}`;
          if (this.nodes.has(importedId)) return this.nodes.get(importedId)!;
        }
        
        // 3. CSS Selector
        for (const node of this.nodes.values()) {
            if (node.type === 'css_rule' && node.cssSelector === symbolName) return node;
        }

        // 4. Global fallback
        for (const node of this.nodes.values()) {
          if (node.name === symbolName && ['class', 'function', 'interface', 'struct', 'type', 'enum'].includes(node.type)) {
            return node;
          }
        }

        return null;
      }
    }


    export const createTreeSitterAnalyzer = (options: { maxWorkers?: number } =
    {}): Analyzer => {
      const { maxWorkers = 1 } = options;
      
      return async (files: readonly FileContent[]) => {
        const nodes = new Map<string, CodeNode>();
        let unresolvedRelations: UnresolvedRelation[] = [];
        const allFilePaths = files.map(f => normalizePath(f.path));

        for (const file of files) {
          const langConfig = getLanguageConfigForFile(normalizePath(file.path));
          nodes.set(file.path, {
            id: file.path, type: 'file', name: path.basename(file.path),
            filePath: file.path, startLine: 1, endLine: file.content.split('\n').length,
            language: langConfig?.name,
          });
        }

        const filesToProcess = files.map(file => ({ file, langConfig: getLanguageConfigForFile(normalizePath(file.path)) }))
          .filter((item): item is { file: FileContent, langConfig: LanguageConfig } => !!item.langConfig);
        
        if (maxWorkers > 1) {
          logger.debug(`Analyzing files in parallel with ${maxWorkers} workers.`);
          const pool = new Tinypool({
            filename: fileURLToPath(new URL('analyzer.worker.js', import.meta.url)),
            maxThreads: maxWorkers,
          });

          const tasks = filesToProcess.map(item => pool.run(item));
          const results = await Promise.all(tasks);
          
          for (const result of results) {
            if (result) {
              result.nodes.forEach((node: CodeNode) => nodes.set(node.id, node));
              unresolvedRelations.push(...result.relations);
            }
          }
        } else {
          logger.debug(`Analyzing files sequentially in the main thread.`);
          for (const item of filesToProcess) {
            try {
              const result = await processFileInWorker(item);
              if (result) {
                result.nodes.forEach(node => nodes.set(node.id, node));
                unresolvedRelations.push(...result.relations);
              }
            } catch(error) {
              logger.warn(new ParserError(`Failed to process ${item.file.path}`, item.langConfig.name, error));
            }
          }
        }

        // --- Phase 3: Resolve all relationships ---
        const edges: CodeEdge[] = [];
        const importEdges: CodeEdge[] = [];
        
        // Resolve imports first, as they are needed by the SymbolResolver
        for (const rel of unresolvedRelations) {
          if (rel.type === 'imports') {
            const fromNode = nodes.get(rel.fromId);
            if (!fromNode || fromNode.type !== 'file' || !fromNode.language) continue;
            
            const resolver = getImportResolver(fromNode.language);
            const toId = resolver(rel.fromId, rel.toName, allFilePaths);
            if (toId && nodes.has(toId)) {
              importEdges.push({ fromId: rel.fromId, toId, type: 'imports' });
            }
          }
        }
        
        const symbolResolver = new SymbolResolver(nodes, importEdges);

        for (const rel of unresolvedRelations) {
            if (rel.type === 'imports') continue; // Already handled
            
            const toNode = symbolResolver.resolve(rel.toName, rel.fromId.split('#')[0]!);
            if (toNode && rel.fromId !== toNode.id) {
              const edgeType = rel.type === 'reference' ? 'calls' : rel.type;
              edges.push({ fromId: rel.fromId, toId: toNode.id, type: edgeType });
            }
        }
        
        const finalEdges = [...importEdges, ...edges];
        // Remove duplicates
        const uniqueEdges = [...new Map(finalEdges.map(e => [`${e.fromId}->${e.toId}->${e.type}`, e])).values()];

        return { nodes: Object.freeze(nodes), edges: Object.freeze(uniqueEdges) };
      };
    };
approved: true
